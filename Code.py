import os
import random
import math
import time
import sys

import numpy as np
import matplotlib
from matplotlib import pyplot as plt
from skhep.math.vectors import LorentzVector, Vector3D

from scipy import interpolate
import scipy.integrate as integrate

#yoda_src_path = "/Users/felixkling/work/rivet/local/lib/python2.7/site-packages"
#sys.path.append(yoda_src_path)
#import yoda

########################################################
# General Functions
########################################################

def readfile(filename):
    array = []
    with open(filename) as f:
        for line in f:
            if line[0]=="#":continue
            words = [float(elt.strip()) for elt in line.split( )]
            array.append(words)
    return np.array(array)
    
def read_and_interpolate2d(filename, conversion=10**6):
    br=readfile(filename)
    nx, ny, first = 0, 0, True
    xvals, yvals, zvals, line = [], [], [], []
    for entry in br:
        x,y,z = entry[0], entry[1], entry[2]
        if x == br[0][0]:
            if nx>0:
                first=False
                zvals.append(line)
                line = []
            nx+=1
            yvals.append(y)
        if first:
            ny+=1
            xvals.append(x)
        line.append(z*conversion)
    zvals.append(line)
    f = interpolate.interp2d(xvals, yvals, zvals, kind="linear")
    return f
    
def integrate_dydpt(function,ymin,ymax,ptmin,ptmax,manual=True,nstep=10):
    if manual:
        sigma, nstep = 0, nstep
        dy, dpt = (ymax-ymin)/float(nstep),  (ptmax-ptmin)/float(nstep)
        for y in np.linspace(ymin+0.5*dy, ymax-0.5*dy, nstep):
            for pt in np.linspace(ptmin+0.5*dpt, ptmax-0.5*dpt, nstep):
                sigma += function(y, pt)[0]
        sigma *= dy * dpt
        return sigma
    else:
        return integrate.nquad(function, [ [ymin,ymax], [ptmin,ptmax]])[0]
    
########################################################
# Decay
########################################################

class Decays():
    
    #***************************************
    # Intiate
    #***************************************
    
    def __init__(self):
        self.setup_charmdecay()

    def setup_charmdecay(self):
    
        # Hadron Masses
        self.mhad = {411: 1.86961, 421: 1.86484, 431: 1.96830, 4122:2.28646}
        
        # Hadron Decay BR in Neutrinos
        self.decay_br = {}
        self.decay_br[411]  = {12: 0.17058,-12: -1     ,14: 0.16611,-14: -1     ,16: 0.000971,-16: -1      }
        self.decay_br[-411] = {12: -1     ,-12: 0.17058,14: -1     ,-14: 0.16611,16: -1      ,-16: 0.000971}
        self.decay_br[421]  = {12: 0.06785,-12: -1     ,14: 0.06566,-14: -1     ,16: -1      ,-16: -1      }
        self.decay_br[-421] = {12: -1     ,-12: 0.06785,14: -1     ,-14: 0.06566,16: -1      ,-16: -1      }
        self.decay_br[431]  = {12: 0.08103,-12: -1     ,14: 0.08688,-14: -1     ,16: 0.063011,-16: 0.063011}
        self.decay_br[-431] = {12: -1     ,-12: 0.08103,14: -1     ,-14: 0.08688,16: 0.063011,-16: 0.063011}
        self.decay_br[4122] = {12: 0.04491,-12: -1     ,14: 0.04485,-14: -1     ,16: -1      ,-16: -1      }
        self.decay_br[-4122]= {12: -1     ,-12: 0.04491,14: -1     ,-14: 0.04485,16: -1      ,-16: -1      }
        
        # Energy distribution of neutrinos in the hadron decay rest frame. the first vector
        # constains the energy [GeV], and the second vector the CDF.
        self.energy_cdf = {}
        
        self.energy_cdf["411_12"]=[]
        self.energy_cdf["411_12"].append([
                                  2.0000e-02, 6.0000e-02, 1.0000e-01, 1.4000e-01, 1.8000e-01,
                                  2.2000e-01, 2.6000e-01, 3.0000e-01, 3.4000e-01, 3.8000e-01,
                                  4.2000e-01, 4.6000e-01, 5.0000e-01, 5.4000e-01, 5.8000e-01,
                                  6.2000e-01, 6.6000e-01, 7.0000e-01, 7.4000e-01, 7.8000e-01,
                                  8.2000e-01, 8.6000e-01, 9.0000e-01, 9.4000e-01, 9.8000e-01 ]);
        self.energy_cdf["411_12"].append([
                                  8.0000e-04, 5.2700e-03, 1.5230e-02, 3.2300e-02, 5.7920e-02,
                                  9.1390e-02, 1.3327e-01, 1.8323e-01, 2.4095e-01, 3.0416e-01,
                                  3.7399e-01, 4.4904e-01, 5.2759e-01, 6.0577e-01, 6.8237e-01,
                                  7.5379e-01, 8.1748e-01, 8.7260e-01, 9.2168e-01, 9.6331e-01,
                                  9.9097e-01, 9.9765e-01, 9.9970e-01, 1.0000e+00, 1.0000e+00 ]);

        self.energy_cdf["411_14"]=[]
        self.energy_cdf["411_14"].append([
                                  0.02   , 0.06   , 0.1    , 0.14   , 0.18   ,
                                  0.22   , 0.26   , 0.3    , 0.34   , 0.38   ,
                                  0.42   , 0.46   , 0.5    , 0.54   , 0.58   ,
                                  0.62   , 0.66   , 0.7    , 0.74   , 0.78   ,
                                  0.82   , 0.86   , 0.9    , 0.94   , 0.98   ]);
        self.energy_cdf["411_14"].append([
                                  0.00143, 0.0066 , 0.01779, 0.0359 , 0.06308,
                                  0.09736, 0.14047, 0.19267, 0.25056, 0.31516,
                                  0.38533, 0.4603 , 0.53944, 0.61904, 0.69671,
                                  0.76859, 0.82864, 0.88298, 0.93119, 0.9717 ,
                                  0.99315, 0.9955 , 0.99756, 1.     , 1.     ]);
        self.energy_cdf["411_16"]=[]
        self.energy_cdf["411_16"].append([
                                  0.09002, 0.09006, 0.0901 , 0.09014, 0.09018,
                                  0.09022, 0.09026, 0.0903 , 0.09034, 0.09038,
                                  0.09042, 0.09046, 0.0905 , 0.09054, 0.09058,
                                  0.09062, 0.09066, 0.0907 , 0.09074, 0.09078,
                                  0.09082, 0.09086, 0.0909 , 0.09094, 0.09098 ]);
        self.energy_cdf["411_16"].append([
                                  0.     , 0.     , 0.     , 0.     , 0.     ,
                                  0.     , 0.     , 0.     , 0.     , 0.     ,
                                  0.     , 0.     , 1.     , 1.     , 1.     ,
                                  1.     , 1.     , 1.     , 1.     , 1.     ,
                                  1.     , 1.     , 1.     , 1.     , 1.      ]);
                                                                                
        self.energy_cdf["4122_12"]=[]
        self.energy_cdf["4122_12"].append([
                                  2.0000e-02, 6.0000e-02, 1.0000e-01, 1.4000e-01, 1.8000e-01,
                                  2.2000e-01, 2.6000e-01, 3.0000e-01, 3.4000e-01, 3.8000e-01,
                                  4.2000e-01, 4.6000e-01, 5.0000e-01, 5.4000e-01, 5.8000e-01,
                                  6.2000e-01, 6.6000e-01, 7.0000e-01, 7.4000e-01, 7.8000e-01,
                                  8.2000e-01, 8.6000e-01, 9.0000e-01, 9.4000e-01, 9.8000e-01]);
        self.energy_cdf["4122_12"].append([
                                  4.7000e-04, 3.5100e-03, 1.1730e-02, 2.7100e-02, 5.2330e-02,
                                  8.6570e-02, 1.3012e-01, 1.8371e-01, 2.4600e-01, 3.1687e-01,
                                  3.9504e-01, 4.7553e-01, 5.6096e-01, 6.4640e-01, 7.2686e-01,
                                  8.0066e-01, 8.6366e-01, 9.1608e-01, 9.5668e-01, 9.8267e-01,
                                  9.9486e-01, 9.9852e-01, 9.9980e-01, 1.0000e+00, 1.0000e+00]);
                                                                                                                       
        self.energy_cdf["4122_14"]=[]
        self.energy_cdf["4122_14"].append([
                                  2.0000e-02, 6.0000e-02, 1.0000e-01, 1.4000e-01, 1.8000e-01,
                                  2.2000e-01, 2.6000e-01, 3.0000e-01, 3.4000e-01, 3.8000e-01,
                                  4.2000e-01, 4.6000e-01, 5.0000e-01, 5.4000e-01, 5.8000e-01,
                                  6.2000e-01, 6.6000e-01, 7.0000e-01, 7.4000e-01, 7.8000e-01,
                                  8.2000e-01, 8.6000e-01, 9.0000e-01, 9.4000e-01, 9.8000e-01]);
        self.energy_cdf["4122_14"].append([
                                  5.3000e-04, 4.2600e-03, 1.3230e-02, 2.9650e-02, 5.5470e-02,
                                  9.0560e-02, 1.3608e-01, 1.9190e-01, 2.5644e-01, 3.3082e-01,
                                  4.1116e-01, 4.9705e-01, 5.8394e-01, 6.6998e-01, 7.5044e-01,
                                  8.2409e-01, 8.8539e-01, 9.3578e-01, 9.7089e-01, 9.9116e-01,
                                  9.9686e-01, 9.9939e-01, 1.0000e+00, 1.0000e+00, 1.0000e+00]);

        self.energy_cdf["421_12"]=[]
        self.energy_cdf["421_12"].append([
                                  2.0000e-02, 6.0000e-02, 1.0000e-01, 1.4000e-01, 1.8000e-01,
                                  2.2000e-01, 2.6000e-01, 3.0000e-01, 3.4000e-01, 3.8000e-01,
                                  4.2000e-01, 4.6000e-01, 5.0000e-01, 5.4000e-01, 5.8000e-01,
                                  6.2000e-01, 6.6000e-01, 7.0000e-01, 7.4000e-01, 7.8000e-01,
                                  8.2000e-01, 8.6000e-01, 9.0000e-01, 9.4000e-01, 9.8000e-01]);
        self.energy_cdf["421_12"].append([
                                  7.2000e-04, 4.8200e-03, 1.4330e-02, 3.0760e-02, 5.5140e-02,
                                  8.9280e-02, 1.3066e-01, 1.8116e-01, 2.3762e-01, 3.0164e-01,
                                  3.7017e-01, 4.4564e-01, 5.2277e-01, 6.0160e-01, 6.7859e-01,
                                  7.4933e-01, 8.1201e-01, 8.6752e-01, 9.1658e-01, 9.5984e-01,
                                  9.8774e-01, 9.9556e-01, 9.9974e-01, 1.0000e+00, 1.0000e+00]);

        self.energy_cdf["421_14"]=[]
        self.energy_cdf["421_14"].append([
                                  0.02   , 0.06   , 0.1    , 0.14   , 0.18   ,
                                  0.22   , 0.26   , 0.3    , 0.34   , 0.38   ,
                                  0.42   , 0.46   , 0.5    , 0.54   , 0.58   ,
                                  0.62   , 0.66   , 0.7    , 0.74   , 0.78   ,
                                  0.82   , 0.86   , 0.9    , 0.94   , 0.98   ]);
        self.energy_cdf["421_14"].append([
                                  0.00113, 0.00621, 0.01742, 0.03612, 0.0625 ,
                                  0.09749, 0.14195,  0.192 , 0.25073, 0.31636,
                                  0.38674, 0.46105, 0.53936, 0.61836, 0.69505,
                                  0.76506, 0.82535, 0.87729, 0.92687, 0.96856,
                                  0.99192, 0.99651, 1.     , 1.     , 1.    ]);

        self.energy_cdf["431_12"]=[]
        self.energy_cdf["431_12"].append([
                                  2.0000e-02, 6.0000e-02, 1.0000e-01, 1.4000e-01, 1.8000e-01,
                                  2.2000e-01, 2.6000e-01, 3.0000e-01, 3.4000e-01, 3.8000e-01,
                                  4.2000e-01, 4.6000e-01, 5.0000e-01, 5.4000e-01, 5.8000e-01,
                                  6.2000e-01, 6.6000e-01, 7.0000e-01, 7.4000e-01, 7.8000e-01,
                                  8.2000e-01, 8.6000e-01, 9.0000e-01, 9.4000e-01, 9.8000e-01]);
        self.energy_cdf["431_12"].append([
                                  4.6000e-04, 3.1900e-03, 1.0240e-02, 2.2980e-02, 4.3440e-02,
                                  7.2440e-02, 1.1018e-01, 1.5764e-01, 2.1334e-01, 2.7765e-01,
                                  3.5003e-01, 4.2807e-01, 5.0993e-01, 5.9429e-01, 6.7402e-01,
                                  7.4794e-01, 8.0973e-01, 8.6083e-01, 9.0426e-01, 9.4334e-01,
                                  9.7551e-01, 9.9512e-01, 9.9971e-01, 9.9999e-01, 1.0000e+00]);
                                          
        self.energy_cdf["431_14"]=[]
        self.energy_cdf["431_14"].append([
                                  2.2000e-02, 6.6000e-02, 1.1000e-01, 1.5400e-01, 1.9800e-01,
                                  2.4200e-01, 2.8600e-01, 3.3000e-01, 3.7400e-01, 4.1800e-01,
                                  4.6200e-01, 5.0600e-01, 5.5000e-01, 5.9400e-01, 6.3800e-01,
                                  6.8200e-01, 7.2600e-01, 7.7000e-01, 8.1400e-01, 8.5800e-01,
                                  9.0200e-01, 9.4600e-01, 9.9000e-01, 1.0340e+00, 1.0780e+00]);
        self.energy_cdf["431_14"].append([
                                  5.6000e-04, 4.1300e-03, 1.2960e-02, 2.8820e-02, 5.5100e-02,
                                  9.1320e-02, 1.3923e-01, 1.9547e-01, 2.6281e-01, 3.3909e-01,
                                  4.2140e-01, 5.0623e-01, 5.9237e-01, 6.7092e-01, 7.3848e-01,
                                  7.8896e-01, 8.3460e-01, 8.7674e-01, 9.0920e-01, 9.2550e-01,
                                  9.2676e-01, 9.2693e-01, 1.0000e+00, 1.0000e+00, 1.0000e+00]);
                                                                                
        self.energy_cdf["431_16"]=[]
        self.energy_cdf["431_16"].append([
                                  0.1802, 0.1806, 0.181 , 0.1814, 0.1818,
                                  0.1822, 0.1826, 0.183 , 0.1834, 0.1838,
                                  0.1842, 0.1846, 0.185 , 0.1854, 0.1858,
                                  0.1862, 0.1866, 0.187 , 0.1874, 0.1878,
                                  0.1882, 0.1886, 0.189 , 0.1894, 0.1898]);
        self.energy_cdf["431_16"].append([
                                  0.    , 0.    , 0.    , 0.    , 0.    ,
                                  1.    , 1.    , 1.    , 1.    , 1.    ,
                                  1.    , 1.    , 1.    , 1.    , 1.    ,
                                  1.    , 1.    , 1.    , 1.    , 1.    ,
                                  1.    , 1.    , 1.    , 1.    , 1.    ]);
                                          
        self.energy_cdf["431_-16"]=[]
        self.energy_cdf["431_-16"].append([
                                  2.0000e-02, 6.0000e-02, 1.0000e-01, 1.4000e-01, 1.8000e-01,
                                  2.2000e-01, 2.6000e-01, 3.0000e-01, 3.4000e-01, 3.8000e-01,
                                  4.2000e-01, 4.6000e-01, 5.0000e-01, 5.4000e-01, 5.8000e-01,
                                  6.2000e-01, 6.6000e-01, 7.0000e-01, 7.4000e-01, 7.8000e-01,
                                  8.2000e-01, 8.6000e-01, 9.0000e-01, 9.4000e-01, 9.8000e-01]);
        self.energy_cdf["431_-16"].append([
                                  2.2000e-04, 1.4800e-03, 4.3300e-03, 1.0100e-02, 1.9300e-02,
                                  3.2400e-02, 4.9590e-02, 7.2690e-02, 1.0185e-01, 1.3781e-01,
                                  1.7934e-01, 2.2865e-01, 2.8289e-01, 3.3915e-01, 3.9708e-01,
                                  4.5813e-01, 5.3759e-01, 6.2729e-01, 7.1516e-01, 7.9205e-01,
                                  8.6338e-01, 9.1464e-01, 9.5473e-01, 9.8698e-01, 1.0000e+00]);


    #***************************************
    # Get Neutrino Flux Histograms
    #***************************************
    
    def get_neutrino(self, hpid, vpid, phad, nsample=10):
        output=[]
        apid, sign = abs(hpid), hpid/abs(hpid)
        label = str(abs(apid))+"_"+str(int(sign*vpid))
        for i in range(nsample):
            #construct neutrino in hadron rest frame
            cdfval = random.uniform(0,1)
            icdf = 0
            while (self.energy_cdf[label][1][icdf] < cdfval): icdf+=1
            en = self.energy_cdf[label][0][icdf]
            #get neutrino angles
            phi = random.uniform(-math.pi,math.pi)
            cos = random.uniform(-1,1)
            sin = np.sqrt(1-cos*cos)
            pnu = LorentzVector(en*sin*np.cos(phi),en*sin*np.sin(phi),en*cos,en)
            #boost in lab frame
            p=pnu.boost(-1.*phad.boostvector)
            #get coordinates
            output.append(p)
        return output
    
    
#    def get_neutrinos(self, model, pid, posxmin, posxmax, posymin, posymax, zloc, nsample, conversion=1):
    def get_neutrinos(self, model, pid, condition, zloc, nsample, conversion=1):
        
        # initiate
        values = []
        #phase space boundaries for integral
        ptmin, ptmax, npt = 0,7,70
        dpt = (ptmax-ptmin)/float(npt)
        ymin, ymax, ny = 5,9,40
        dy = (ymax-ymin)/float(ny)
        
        #loop over hadrons
        for hpid in [-411, -421, -431, -4122, 411, 421, 431, 4122]:
            #get mesons
            datafile = "files/"+model+"/"+model+"_"+str(hpid)+".txt"
            f = read_and_interpolate2d(datafile, conversion=conversion)
            #nsample
            usensample=nsample
            if pid in [431,-431] and pid in [16,-16]: usensample=nsample*10
            #get BR
            br = self.decay_br[hpid][pid]
            if br<=0: continue
            # loop over phase space
            for yc in np.linspace(ymin, ymax, ny+1):
                for ptc in np.linspace(ptmin, ptmax, npt+1):
                    # weight
                    xs = integrate_dydpt(f,yc-dy/2.,yc+dy/2.,ptc-dpt/2.,ptc+dpt/2.,manual=True, nstep=3)
                    if xs<=0: continue
                    #construct hadron momentum
                    pt = random.uniform(ptc-dpt/2.,ptc+dpt/2.)
                    y = random.uniform(yc-dy/2.,yc+dy/2.)
                    phi = random.uniform(-math.pi,math.pi)
                    mhad = self.mhad[abs(hpid)]
                    mt = np.sqrt(mhad*mhad + pt*pt)
                    px = pt * np.cos(phi)
                    py = pt * np.sin(phi)
                    pz = mt * np.sinh(y)
                    en = mt * np.cosh(y)
                    if pz<10: continue
                    phad = LorentzVector(px,py,pz,en)
                    
                    # get neutrinos
                    pnus = self.get_neutrino(hpid, pid, phad, nsample=usensample)
                    # check if neutrinos in range, then fill energy in histogram
                    for p in pnus:
                        en, posx, posy = p.e, p.x/p.z*zloc,p.y/p.z*zloc
                        if eval(condition)==False:continue
                        if en<10: continue
                        values.append([p,xs*br/float(nsample),hpid])
        return np.array(values)

    def do_decay(self, model, nsample=25, setups=["FLARE"]):
    
        for setup in setups:
            #define geometry
            #if setup=="FASERv": posxmin, posxmax, posymin, posymax, zloc = -0.125, 0.125, -0.125, 0.125, 480.
            #if setup=="FLARE" : posxmin, posxmax, posymin, posymax, zloc = -0.5, 0.5, -0.5, 0.5, 620.
            if setup=="FASERv": condition, zloc = "abs(posx)<0.125 and abs(posy)<0.125", 480.
            if setup=="FLARE" : condition, zloc = "abs(posx)<0.5 and abs(posy)<0.5", 620.
            if setup=="eta85" : condition, zloc = "posx**2+posy**2<0.2**2", 480.
            
            # define histogram
            emin, emax, ne,  = 1, 4, 30
            xEdges = np.logspace(emin, emax, ne+1)
            xCenters = (xEdges[:-1] + xEdges[1:]) / 2.
            
            #loop over neutrinos
            for pid in [12,14,16,-12,-14,-16]:
                # get neutrinos
                #values = self.get_neutrinos(model, pid, posxmin, posxmax, posymin, posymax, zloc, nsample=nsample)
                values = self.get_neutrinos(model, pid, condition, zloc, nsample=nsample)
                # feed into histogram
                weights, _ = np.histogram([p.e for p in values.T[0]], weights=values.T[1],  bins=xEdges)
                # save to file
                dataname = "files/"+model+"/"+model+"_"+setup+"_"+str(pid)+".txt"
                datafile = open(dataname,"w")
                for p,w in zip(xCenters,weights):
                    datafile.write(str(p)+" "+str(w)+"\n")
                datafile.close()
                
    def do_decay_event(self, model, nsample=25, condition="abs(posx)<0.5 and abs(posy)<0.5"):
    
        # define setup
        zloc=480
        
        #open file
        dataname = "events/LHC13_"+model+"_charm_0.txt"
        datafile = open(dataname,"w")
    
        #loop over neutrinos
        for pid in [12,14,16,-12,-14,-16]:
            # get neutrinos
            values = self.get_neutrinos(model, pid, condition, zloc, nsample=nsample)
            # save to file
            for p,w,hpid in values:
                datafile.write(str(pid)+" ")
                datafile.write(str(hpid)+" ")
                datafile.write(str(round(p.x/p.z*zloc,3))+" ")
                datafile.write(str(round(p.y/p.z*zloc,3))+" ")
                datafile.write("0 ")
                datafile.write('{:.4e}'.format(p.x/p.z)+" ")
                datafile.write('{:.4e}'.format(p.y/p.z)+" ")
                datafile.write('{:.2e}'.format(p.e)+" ")
                datafile.write('{:.3e}'.format(w)+"\n")
                
        #close file
        datafile.close()


########################################################
# 5 - Plotting Functions
########################################################

class Plotting():
    
    #***************************************
    # Intiate
    #***************************************
    
    def __init__(self):
        self.setup_lightdata()
    
    def setup_lightdata(self):
    
        self.nucharm={}
        self.nulight={}

        self.nucharm['FASERv_12_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [7.13877000e+02, 1.30073952e+03, 1.72373819e+03, 2.33683303e+03,
              3.11075176e+03, 4.80026582e+03, 6.94833787e+03, 8.94496224e+03,
              1.19216830e+04, 1.60514148e+04, 2.04118117e+04, 2.52254144e+04,
              3.21948817e+04, 4.03130299e+04, 4.59775411e+04, 5.05001013e+04,
              5.48458200e+04, 5.32623739e+04, 4.78461891e+04, 4.04712677e+04,
              3.17600681e+04, 2.36473923e+04, 1.44812462e+04, 7.70930170e+03,
              3.13452594e+03, 8.63969848e+02, 9.68088931e+01, 0.00000000e+00],
             [8.45290083e-03, 1.81630426e-02, 2.88571431e-02, 5.06110253e-02,
              8.23224819e-02, 1.60167012e-01, 2.93640257e-01, 4.81996687e-01,
              7.76823354e-01, 1.31025777e+00, 2.11457791e+00, 3.26389203e+00,
              5.21772565e+00, 8.19695389e+00, 1.17206368e+01, 1.61099313e+01,
              2.18204185e+01, 2.65110324e+01, 3.02368078e+01, 3.21618752e+01,
              3.25468347e+01, 3.07616166e+01, 2.33879197e+01, 1.52253961e+01,
              7.52646608e+00, 2.51443072e+00, 3.12887955e-01, 0.00000000e+00]] )
        self.nucharm['FASERv_12_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [8.37465600e+02, 1.19369379e+03, 1.65083629e+03, 2.42822132e+03,
              3.35764764e+03, 4.38602832e+03, 5.96630425e+03, 7.80631588e+03,
              1.01400380e+04, 1.31351837e+04, 1.58565542e+04, 1.92151958e+04,
              2.22253452e+04, 2.52945354e+04, 2.83591366e+04, 3.06512872e+04,
              3.14710423e+04, 3.11214091e+04, 2.94093046e+04, 2.56203019e+04,
              2.09445576e+04, 1.55249216e+04, 1.04633573e+04, 6.55884155e+03,
              3.67479746e+03, 1.51038335e+03, 2.27874327e+02, 1.79336686e+00],
             [9.40449920e-03, 1.66533674e-02, 2.84459792e-02, 5.25443837e-02,
              8.98640939e-02, 1.47992888e-01, 2.48969979e-01, 4.06681406e-01,
              6.63188295e-01, 1.07675783e+00, 1.63657734e+00, 2.49570573e+00,
              3.61094810e+00, 5.15507422e+00, 7.23054655e+00, 9.81896939e+00,
              1.26280353e+01, 1.55876677e+01, 1.85139672e+01, 2.03064020e+01,
              2.11242383e+01, 2.02907731e+01, 1.79183060e+01, 1.48423365e+01,
              1.06616040e+01, 5.43573150e+00, 9.93427055e-01, 9.74705356e-03]] )
        self.nucharm['FASERv_12_D']=np.array(
             [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.39599400e+02, 4.27063307e+02, 8.79797919e+02, 1.02031755e+03,
              1.83093088e+03, 2.32648082e+03, 3.63556053e+03, 4.87604266e+03,
              6.89088828e+03, 1.08037911e+04, 1.49395687e+04, 2.20006352e+04,
              3.25880656e+04, 4.73085461e+04, 6.64811977e+04, 9.33902533e+04,
              1.25834759e+05, 1.70168261e+05, 2.18670296e+05, 2.65947242e+05,
              3.01438843e+05, 3.18642855e+05, 3.07062773e+05, 2.53453601e+05,
              1.65706565e+05, 7.11790164e+04, 1.22332885e+04, 2.51754864e+02],
             [4.73672539e-03, 5.76973483e-03, 1.51237321e-02, 2.12640949e-02,
              4.82390276e-02, 7.90582743e-02, 1.49462835e-01, 2.60499436e-01,
              4.60044830e-01, 8.97144791e-01, 1.53594525e+00, 2.79969314e+00,
              5.18895770e+00, 9.42357401e+00, 1.68138114e+01, 2.94724657e+01,
              4.99214842e+01, 8.54135507e+01, 1.37637059e+02, 2.12598903e+02,
              3.07104910e+02, 4.16683920e+02, 5.12057229e+02, 5.39041544e+02,
              4.44192346e+02, 2.37718068e+02, 4.87283627e+01, 1.04148903e+00]] )
        self.nucharm['FASERv_14_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [9.47435900e+02, 1.07222414e+03, 1.65459142e+03, 2.19159414e+03,
              3.23425070e+03, 4.45803541e+03, 6.67847705e+03, 9.17919113e+03,
              1.21332375e+04, 1.57649771e+04, 2.01284238e+04, 2.54786082e+04,
              3.22447122e+04, 3.84684241e+04, 4.41843774e+04, 4.89783894e+04,
              5.37167024e+04, 5.16547977e+04, 4.73617356e+04, 3.94054352e+04,
              3.10951807e+04, 2.21930582e+04, 1.38859925e+04, 7.69162084e+03,
              2.93908945e+03, 7.62168925e+02, 8.68389058e+01, 0.00000000e+00],
             [9.89524062e-03, 1.51101548e-02, 2.85549597e-02, 4.62425942e-02,
              8.80581603e-02, 1.50916959e-01, 2.80493252e-01, 4.77486625e-01,
              8.13005269e-01, 1.31112208e+00, 2.08573911e+00, 3.28422538e+00,
              5.25491412e+00, 7.79236884e+00, 1.12295605e+01, 1.54871823e+01,
              2.15005840e+01, 2.59538647e+01, 2.96873913e+01, 3.16483124e+01,
              3.18470069e+01, 2.85440616e+01, 2.21119079e+01, 1.50568976e+01,
              7.19886517e+00, 2.27799755e+00, 2.77135660e-01, 0.00000000e+00]] )
        self.nucharm['FASERv_14_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [8.32844200e+02, 1.23725315e+03, 1.65506963e+03, 2.43100730e+03,
              3.39274191e+03, 4.47172943e+03, 5.99452844e+03, 7.84926204e+03,
              1.01099578e+04, 1.27013757e+04, 1.57722895e+04, 1.89016870e+04,
              2.23444064e+04, 2.52750456e+04, 2.79296033e+04, 2.98942763e+04,
              3.08102178e+04, 3.04810167e+04, 2.87675199e+04, 2.50282204e+04,
              2.02176534e+04, 1.51057192e+04, 1.03690354e+04, 6.40213576e+03,
              3.47757186e+03, 1.34552506e+03, 1.82499110e+02, 1.43277748e+00],
             [9.44952788e-03, 1.75224297e-02, 2.87127168e-02, 5.24053267e-02,
              9.03906319e-02, 1.50475759e-01, 2.49990334e-01, 4.10207990e-01,
              6.64739490e-01, 1.04370570e+00, 1.62389686e+00, 2.43622472e+00,
              3.62097868e+00, 5.12522346e+00, 7.13047284e+00, 9.58710647e+00,
              1.23634307e+01, 1.53417557e+01, 1.81304778e+01, 1.99155171e+01,
              2.04722264e+01, 1.98426260e+01, 1.77960705e+01, 1.44524562e+01,
              1.00773621e+01, 4.84007350e+00, 8.03637895e-01, 7.79432392e-03]] )
        self.nucharm['FASERv_14_D']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [3.29020400e+02, 4.98952103e+02, 7.46943133e+02, 1.24272584e+03,
              1.80440228e+03, 2.74810133e+03, 3.37376676e+03, 5.36011052e+03,
              7.75309557e+03, 1.11562239e+04, 1.58379592e+04, 2.28774886e+04,
              3.40587798e+04, 4.83779379e+04, 6.70273319e+04, 9.57097361e+04,
              1.26449353e+05, 1.69717090e+05, 2.16908083e+05, 2.61037630e+05,
              2.95866265e+05, 3.14465192e+05, 3.02708331e+05, 2.45801879e+05,
              1.58736202e+05, 6.39990876e+04, 9.74147372e+03, 1.77874301e+02],
             [3.76465503e-03, 6.99963100e-03, 1.29621240e-02, 2.72577222e-02,
              4.70229879e-02, 9.11208464e-02, 1.44221741e-01, 2.79881187e-01,
              4.93521649e-01, 9.01139184e-01, 1.61011333e+00, 2.94131425e+00,
              5.44790602e+00, 9.67434997e+00, 1.69177856e+01, 3.02187601e+01,
              5.01313122e+01, 8.50637474e+01, 1.37477241e+02, 2.09357587e+02,
              3.03477459e+02, 4.12943190e+02, 5.06670306e+02, 5.23460048e+02,
              4.26272294e+02, 2.14336099e+02, 3.80540511e+01, 6.68880428e-01]] )
        self.nucharm['FASERv_16_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [2.24558700e+02, 3.36668130e+02, 4.71658767e+02, 5.89894263e+02,
              8.86836473e+02, 1.16370021e+03, 1.57219161e+03, 2.07579815e+03,
              2.54127954e+03, 3.34804809e+03, 3.62067011e+03, 4.26902705e+03,
              4.48490943e+03, 5.28928832e+03, 5.35844292e+03, 4.06556993e+03,
              3.12543108e+03, 3.36681689e+03, 2.75454410e+03, 2.51502807e+03,
              2.14862776e+03, 1.28900484e+03, 5.82286638e+02, 2.90646518e+02,
              1.03276989e+02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
             [7.10695820e-04, 1.68218350e-03, 3.39504361e-03, 5.88107275e-03,
              1.24393092e-02, 2.28355242e-02, 4.31257609e-02, 7.24181635e-02,
              1.17352123e-01, 2.07883234e-01, 2.99440833e-01, 4.45572152e-01,
              5.62414564e-01, 9.32130984e-01, 1.18482123e+00, 1.22208114e+00,
              1.18602668e+00, 1.69008331e+00, 1.67033699e+00, 1.87016473e+00,
              1.95822638e+00, 1.39198860e+00, 6.91318335e-01, 3.55985372e-01,
              1.54489456e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]] )
        self.nucharm['FASERv_16_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [3.21287400e+02, 4.37386465e+02, 6.29339194e+02, 8.49562465e+02,
              1.14531085e+03, 1.50821703e+03, 1.92085906e+03, 2.36388005e+03,
              2.84155973e+03, 3.30958899e+03, 3.71271076e+03, 4.23574154e+03,
              4.62029374e+03, 4.33387467e+03, 4.22167124e+03, 3.93428877e+03,
              3.35573564e+03, 2.83518785e+03, 2.42143467e+03, 2.03096120e+03,
              1.56666569e+03, 1.14990982e+03, 6.64377433e+02, 2.71996508e+02,
              6.86417942e+01, 5.78721152e+00, 0.00000000e+00, 0.00000000e+00],
             [1.04192771e-03, 2.13613666e-03, 4.53897647e-03, 8.68627404e-03,
              1.63326937e-02, 2.95496826e-02, 5.06138031e-02, 8.39570621e-02,
              1.34023011e-01, 2.03976620e-01, 3.02148389e-01, 4.47568065e-01,
              6.32728606e-01, 7.53636808e-01, 9.47682881e-01, 1.07193475e+00,
              1.21272173e+00, 1.29415917e+00, 1.40610960e+00, 1.50692477e+00,
              1.48850307e+00, 1.39726992e+00, 1.00460281e+00, 5.00727502e-01,
              1.69687176e-01, 2.05149988e-02, 0.00000000e+00, 0.00000000e+00]] )
        self.nucharm['FASERv_16_D']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [6.85781200e+01, 9.64565598e+01, 1.24224693e+02, 1.88004054e+02,
              3.08122453e+02, 4.91445196e+02, 5.81631224e+02, 1.08897957e+03,
              1.46743661e+03, 2.31365389e+03, 3.38669301e+03, 4.46759808e+03,
              5.75934777e+03, 9.53548066e+03, 1.10841426e+04, 1.63167548e+04,
              1.53966399e+04, 1.47905016e+04, 1.30249530e+04, 8.81937330e+03,
              9.45703772e+03, 1.02744046e+04, 9.31132816e+03, 6.89327898e+03,
              4.26683859e+03, 1.30312998e+03, 9.93666863e+01, 0.00000000e+00],
             [2.16509185e-04, 4.54998718e-04, 9.55798369e-04, 1.91457416e-03,
              4.45286911e-03, 9.76003702e-03, 1.63131441e-02, 3.70356719e-02,
              6.63668353e-02, 1.51743111e-01, 2.94697298e-01, 4.64518720e-01,
              7.85983303e-01, 1.64126437e+00, 2.36569400e+00, 4.46228430e+00,
              5.85976621e+00, 7.08662620e+00, 7.16181729e+00, 6.38246755e+00,
              8.84037546e+00, 1.19753418e+01, 1.31104324e+01, 1.19605560e+01,
              9.87588015e+00, 4.12330938e+00, 4.21030544e-01, 0.00000000e+00]] )
        self.nulight['FASERv_12_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [5.01277000e+03, 6.90687525e+03, 1.00268751e+04, 1.50000856e+04,
              2.05739671e+04, 2.89171451e+04, 4.06657143e+04, 5.52748516e+04,
              7.17226233e+04, 9.49930094e+04, 1.23556556e+05, 1.54869060e+05,
              1.92527544e+05, 2.22761297e+05, 2.36888189e+05, 2.28920018e+05,
              2.02449276e+05, 1.63348945e+05, 1.20515179e+05, 7.98667229e+04,
              4.78524464e+04, 2.53919469e+04, 1.22623917e+04, 4.82416789e+03,
              1.51731079e+03, 3.00177664e+02, 2.06911536e+01, 1.19129696e-01],
             [5.60479965e-02, 9.16869008e-02, 1.68998232e-01, 3.32566965e-01,
              5.47116068e-01, 9.57331314e-01, 1.66405523e+00, 2.82248864e+00,
              4.53174215e+00, 7.45236978e+00, 1.20799625e+01, 1.87427440e+01,
              2.90643986e+01, 4.20291906e+01, 5.61467446e+01, 6.83552102e+01,
              7.65301496e+01, 7.83988586e+01, 7.35062243e+01, 6.19633385e+01,
              4.72907501e+01, 3.15777843e+01, 1.91587487e+01, 9.45832211e+00,
              3.68381876e+00, 8.90916363e-01, 8.03207514e-02, 5.86867831e-04]] )
        self.nulight['FASERv_12_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [2.69002500e+03, 3.57775352e+03, 5.40070330e+03, 7.78612611e+03,
              1.10366093e+04, 1.59208663e+04, 2.29550949e+04, 3.23500338e+04,
              4.55691125e+04, 6.37263539e+04, 8.91658579e+04, 1.22924283e+05,
              1.62883317e+05, 2.02915939e+05, 2.33347242e+05, 2.44341066e+05,
              2.31602172e+05, 1.98186449e+05, 1.51397415e+05, 1.03163419e+05,
              6.26561896e+04, 3.42104413e+04, 1.68556072e+04, 7.29187991e+03,
              2.37640415e+03, 4.14840703e+02, 1.27805032e+01, 1.11456047e-02],
             [3.05982955e-02, 4.98197869e-02, 9.34696124e-02, 1.66858592e-01,
              2.90721240e-01, 5.18764583e-01, 9.27604319e-01, 1.61029700e+00,
              2.79250649e+00, 4.81457916e+00, 8.30707584e+00, 1.41957097e+01,
              2.33866023e+01, 3.63978281e+01, 5.26079435e+01, 6.96483695e+01,
              8.39846236e+01, 9.18433158e+01, 8.99436715e+01, 7.84852820e+01,
              6.08546879e+01, 4.21547408e+01, 2.60431337e+01, 1.39897342e+01,
              5.63750783e+00, 1.21860613e+00, 4.56321395e-02, 5.49991636e-05]] )
        self.nulight['FASERv_12_D']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [2.67661300e+03, 3.64948161e+03, 5.26719500e+03, 6.43826948e+03,
              8.81756434e+03, 1.38440678e+04, 1.94296341e+04, 2.79570570e+04,
              3.74306031e+04, 4.98669804e+04, 6.70825126e+04, 8.77118665e+04,
              1.09436790e+05, 1.29260886e+05, 1.41099548e+05, 1.41515142e+05,
              1.27275699e+05, 1.04131039e+05, 7.72470537e+04, 5.19269454e+04,
              3.13449497e+04, 1.70890934e+04, 8.23005169e+03, 3.31454051e+03,
              9.77311164e+02, 1.94395356e+02, 1.08119459e+01, 6.22017781e-02],
             [2.95884410e-02, 5.00108754e-02, 9.49285391e-02, 1.37163622e-01,
              2.33018010e-01, 4.63106673e-01, 7.89700131e-01, 1.39301800e+00,
              2.34474782e+00, 3.84657615e+00, 6.44706598e+00, 1.03965981e+01,
              1.62282349e+01, 2.39181338e+01, 3.27759120e+01, 4.14135421e+01,
              4.72095057e+01, 4.89366301e+01, 4.63673745e+01, 3.98754841e+01,
              3.07920235e+01, 2.12979202e+01, 1.28627949e+01, 6.43542282e+00,
              2.36947763e+00, 5.84247419e-01, 3.77682523e-02, 3.09583302e-04]] )
        self.nulight['FASERv_12_Q']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [5.62578700e+03, 7.45592861e+03, 1.11177447e+04, 1.62357221e+04,
              2.26137227e+04, 3.29575900e+04, 4.72701889e+04, 6.21660779e+04,
              8.36355803e+04, 1.12754792e+05, 1.49046378e+05, 1.90417712e+05,
              2.35700412e+05, 2.68899932e+05, 2.84019669e+05, 2.74641233e+05,
              2.40321411e+05, 1.90342639e+05, 1.35103936e+05, 8.46959445e+04,
              4.58422941e+04, 2.12202433e+04, 9.08473197e+03, 3.23990408e+03,
              7.24011929e+02, 8.96750188e+01, 2.21959057e+00, 9.17981114e-03],
             [6.52570332e-02, 1.02795086e-01, 1.93479288e-01, 3.40377864e-01,
              6.00995292e-01, 1.07693189e+00, 1.90403032e+00, 3.10788228e+00,
              5.18922062e+00, 8.66469616e+00, 1.42912870e+01, 2.25693063e+01,
              3.49236329e+01, 4.97788017e+01, 6.59955725e+01, 7.98965697e+01,
              8.77991569e+01, 8.76071845e+01, 7.86586490e+01, 6.28527731e+01,
              4.36370238e+01, 2.58954591e+01, 1.38701999e+01, 6.15188158e+00,
              1.69669402e+00, 2.58948098e-01, 6.89783728e-03, 4.14878881e-05]] )
        self.nulight['FASERv_12_E']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.36994400e+03, 6.31655325e+03, 8.96176778e+03, 1.39726105e+04,
              1.92430280e+04, 2.73315232e+04, 3.83685788e+04, 5.17395580e+04,
              7.02515926e+04, 9.15528711e+04, 1.22215361e+05, 1.56833680e+05,
              1.95483933e+05, 2.29482335e+05, 2.45344174e+05, 2.41754893e+05,
              2.17945470e+05, 1.77509799e+05, 1.30350691e+05, 8.56283168e+04,
              4.94550703e+04, 2.56742412e+04, 1.20237814e+04, 4.81738295e+03,
              1.55058174e+03, 3.53393429e+02, 4.10112167e+01, 7.96584849e-01],
             [5.06955628e-02, 9.05046396e-02, 1.54566855e-01, 2.95431127e-01,
              5.23240176e-01, 9.13477561e-01, 1.58603386e+00, 2.65752396e+00,
              4.50487209e+00, 7.32508491e+00, 1.21335053e+01, 1.94459302e+01,
              3.03573065e+01, 4.46743181e+01, 6.00095231e+01, 7.38978796e+01,
              8.36361428e+01, 8.52929295e+01, 7.88218974e+01, 6.52576411e+01,
              4.77306249e+01, 3.13936292e+01, 1.83866757e+01, 9.23141389e+00,
              3.69310360e+00, 1.05065019e+00, 1.52181769e-01, 3.47410113e-03]] )
        self.nulight['FASERv_14_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.42255500e+05, 5.18888307e+05, 6.12860634e+05, 7.15339698e+05,
              8.43789244e+05, 9.91566903e+05, 1.10910148e+06, 1.22384208e+06,
              1.32887640e+06, 1.43208166e+06, 1.48740939e+06, 1.51594460e+06,
              1.51303235e+06, 1.46671752e+06, 1.38570698e+06, 1.25305822e+06,
              1.09297437e+06, 9.04405662e+05, 7.21034661e+05, 5.34667891e+05,
              3.74399564e+05, 2.47456761e+05, 1.42098666e+05, 7.20036762e+04,
              3.32590260e+04, 1.25175191e+04, 2.73546465e+03, 9.82409110e+01],
             [5.02966628e+00, 7.30563651e+00, 1.07852270e+01, 1.56702851e+01,
              2.31032609e+01, 3.39564693e+01, 4.76413272e+01, 6.59146002e+01,
              8.98875539e+01, 1.21235119e+02, 1.58577206e+02, 2.03161318e+02,
              2.55232168e+02, 3.11951686e+02, 3.70201639e+02, 4.21043417e+02,
              4.60577698e+02, 4.82130995e+02, 4.85392379e+02, 4.54193060e+02,
              4.02658409e+02, 3.38510585e+02, 2.45962301e+02, 1.59026505e+02,
              9.38228710e+01, 4.48189372e+01, 1.20071832e+01, 5.29810574e-01]] )
        self.nulight['FASERv_14_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [2.74468200e+05, 3.20750588e+05, 3.86144439e+05, 4.60087061e+05,
              5.55417742e+05, 6.67016609e+05, 7.67572078e+05, 8.61710598e+05,
              9.50084033e+05, 1.02959869e+06, 1.07654237e+06, 1.10302401e+06,
              1.10502410e+06, 1.08282377e+06, 1.03098847e+06, 9.53468457e+05,
              8.54505765e+05, 7.43808047e+05, 6.31525008e+05, 5.01265811e+05,
              3.75958158e+05, 2.54238264e+05, 1.47991293e+05, 7.49282637e+04,
              3.50501527e+04, 1.30679076e+04, 1.97977651e+03, 8.66181015e+00],
             [3.11784035e+00, 4.53109411e+00, 6.79328185e+00, 1.01135744e+01,
              1.52948024e+01, 2.30548461e+01, 3.33142263e+01, 4.69303855e+01,
              6.48800887e+01, 8.83109416e+01, 1.16086333e+02, 1.49771442e+02,
              1.89286078e+02, 2.33634029e+02, 2.80050332e+02, 3.25577054e+02,
              3.67531454e+02, 4.05354394e+02, 4.36827837e+02, 4.37536997e+02,
              4.14973832e+02, 3.54861137e+02, 2.59461325e+02, 1.65222972e+02,
              9.83944408e+01, 4.66573708e+01, 8.80539422e+00, 4.71203343e-02]] )
        self.nulight['FASERv_14_D']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [3.73726900e+05, 4.41243324e+05, 5.28799520e+05, 6.20894224e+05,
              7.52445446e+05, 8.91401382e+05, 1.02536032e+06, 1.14579349e+06,
              1.25013712e+06, 1.32308210e+06, 1.36215457e+06, 1.37039548e+06,
              1.34123569e+06, 1.27865307e+06, 1.17430657e+06, 1.02811315e+06,
              8.57383884e+05, 6.88870037e+05, 5.24957431e+05, 3.65600183e+05,
              2.45341999e+05, 1.56484794e+05, 9.03513149e+04, 4.62235625e+04,
              2.11584886e+04, 7.06721997e+03, 1.70414902e+03, 5.72633992e+01],
             [4.25312344e+00, 6.23973780e+00, 9.29429600e+00, 1.35917509e+01,
              2.06104574e+01, 3.06037793e+01, 4.42389093e+01, 6.19149155e+01,
              8.47728952e+01, 1.12525488e+02, 1.45977308e+02, 1.84806535e+02,
              2.27378897e+02, 2.72991490e+02, 3.15645183e+02, 3.46101469e+02,
              3.62664790e+02, 3.67533310e+02, 3.53474672e+02, 3.09068840e+02,
              2.63655633e+02, 2.13383471e+02, 1.57208668e+02, 1.02195428e+02,
              5.94848642e+01, 2.50254162e+01, 7.44624652e+00, 3.11513467e-01]] )
        self.nulight['FASERv_14_Q']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.47546500e+05, 5.38115500e+05, 6.36230961e+05, 7.62977131e+05,
              9.23911656e+05, 1.11069175e+06, 1.28311076e+06, 1.44424293e+06,
              1.60261019e+06, 1.73594979e+06, 1.79744880e+06, 1.81421044e+06,
              1.77016224e+06, 1.66524989e+06, 1.51772829e+06, 1.32299081e+06,
              1.11904635e+06, 8.90448608e+05, 6.80501265e+05, 4.80510160e+05,
              3.16773285e+05, 1.89131262e+05, 9.37078074e+04, 4.08930355e+04,
              1.54204088e+04, 3.61591889e+03, 2.63710769e+02, 3.24729643e+00],
             [5.09601182e+00, 7.58889639e+00, 1.11004007e+01, 1.66577310e+01,
              2.51719135e+01, 3.79014717e+01, 5.48536075e+01, 7.73437511e+01,
              1.07605064e+02, 1.46100767e+02, 1.89732873e+02, 2.40289647e+02,
              2.95437040e+02, 3.49204989e+02, 4.00578077e+02, 4.39509377e+02,
              4.66858690e+02, 4.69018078e+02, 4.52850642e+02, 4.01927732e+02,
              3.34257028e+02, 2.52888216e+02, 1.56341291e+02, 8.52394115e+01,
              4.09685240e+01, 1.22092765e+01, 1.06396629e+00, 1.76653252e-02]] )
        self.nulight['FASERv_14_E']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [5.00051500e+05, 5.80787450e+05, 6.84462628e+05, 7.98924355e+05,
              9.20513130e+05, 1.06227359e+06, 1.19746358e+06, 1.29388725e+06,
              1.40053482e+06, 1.48173438e+06, 1.51728858e+06, 1.52488264e+06,
              1.51954681e+06, 1.46546803e+06, 1.38600038e+06, 1.24513091e+06,
              1.07330944e+06, 8.87907799e+05, 6.90241337e+05, 4.90913986e+05,
              3.36020411e+05, 2.11619075e+05, 1.19459087e+05, 6.23278506e+04,
              2.77302218e+04, 1.07243760e+04, 3.08859274e+03, 3.80341176e+02],
             [5.70005284e+00, 8.21817587e+00, 1.19972974e+01, 1.74639202e+01,
              2.51015877e+01, 3.62362258e+01, 5.13668779e+01, 6.96139224e+01,
              9.47524643e+01, 1.26206613e+02, 1.61894560e+02, 2.05321516e+02,
              2.57329858e+02, 3.12600780e+02, 3.73013438e+02, 4.22815168e+02,
              4.58366406e+02, 4.79495604e+02, 4.70285927e+02, 4.17294790e+02,
              3.55475810e+02, 2.80573560e+02, 1.97043943e+02, 1.28921756e+02,
              7.25366505e+01, 3.57156577e+01, 1.30061777e+01, 2.00693938e+00]] )
        self.nucharm['FLARE_12_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [8.09555500e+04, 1.18352233e+05, 1.68766464e+05, 2.32569311e+05,
              3.27537101e+05, 4.48598644e+05, 6.40274919e+05, 8.70912733e+05,
              1.12410340e+06, 1.49956022e+06, 1.97509802e+06, 2.51564533e+06,
              3.10379505e+06, 3.70158653e+06, 4.16489081e+06, 4.55798053e+06,
              4.58082590e+06, 4.32228454e+06, 3.63278451e+06, 2.61987233e+06,
              1.64341109e+06, 8.94383328e+05, 4.58529440e+05, 1.84697589e+05,
              6.18876026e+04, 1.77267365e+04, 2.24316043e+03, 1.33135610e+02],
             [7.17799479e-01, 1.41602159e+00, 2.61926221e+00, 4.47380288e+00,
              8.09076262e+00, 1.42430619e+01, 2.55367232e+01, 4.40970156e+01,
              7.25084440e+01, 1.22084678e+02, 2.02811861e+02, 3.24577812e+02,
              5.03456637e+02, 7.52949280e+02, 1.06343129e+03, 1.46024064e+03,
              1.83983849e+03, 2.18057884e+03, 2.29191565e+03, 2.07682489e+03,
              1.63474164e+03, 1.11608748e+03, 7.11030908e+02, 3.50310797e+02,
              1.39311620e+02, 4.28437039e+01, 5.96562117e+00, 4.17941169e-01]] )
        self.nucharm['FLARE_12_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [8.74902500e+04, 1.13719083e+05, 1.64625474e+05, 2.21580796e+05,
              3.11395978e+05, 4.36773230e+05, 5.68356134e+05, 7.66470334e+05,
              9.89365019e+05, 1.24252160e+06, 1.52343676e+06, 1.82937728e+06,
              2.13094463e+06, 2.41775940e+06, 2.70089563e+06, 2.84100545e+06,
              2.85893629e+06, 2.72749444e+06, 2.42576970e+06, 1.98885290e+06,
              1.45276023e+06, 8.74786630e+05, 4.39380755e+05, 1.62816898e+05,
              4.96083169e+04, 1.07243130e+04, 5.02144388e+02, 0.00000000e+00],
             [7.74254493e-01, 1.34001712e+00, 2.46321304e+00, 4.26462859e+00,
              7.76503129e+00, 1.39071140e+01, 2.30930661e+01, 3.92380058e+01,
              6.38021412e+01, 1.01153632e+02, 1.55750266e+02, 2.36331318e+02,
              3.46706677e+02, 4.95356363e+02, 6.94041502e+02, 9.21176138e+02,
              1.16498707e+03, 1.40529474e+03, 1.56913038e+03, 1.61725584e+03,
              1.48332897e+03, 1.12209259e+03, 7.16011993e+02, 3.49052654e+02,
              1.41768366e+02, 3.90226392e+01, 2.22242326e+00, 0.00000000e+00]] )
        self.nucharm['FLARE_12_D']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [3.52998500e+04, 5.32475114e+04, 8.13625178e+04, 1.09835335e+05,
              1.58988704e+05, 2.27131776e+05, 3.33010447e+05, 4.78584132e+05,
              7.15247319e+05, 1.03605700e+06, 1.53281022e+06, 2.22310488e+06,
              3.23991437e+06, 4.63352236e+06, 6.63998471e+06, 9.08047402e+06,
              1.19084523e+07, 1.44395953e+07, 1.57964863e+07, 1.53113340e+07,
              1.31332646e+07, 1.02931818e+07, 7.46825032e+06, 4.88948239e+06,
              2.56285857e+06, 7.98516769e+05, 7.30539628e+04, 8.01484668e+02],
             [3.11310769e-01, 6.16789093e-01, 1.24442081e+00, 2.11455327e+00,
              3.92714745e+00, 7.17104030e+00, 1.33130699e+01, 2.43203161e+01,
              4.56163695e+01, 8.38209538e+01, 1.56687654e+02, 2.85324699e+02,
              5.24396748e+02, 9.46322787e+02, 1.71057091e+03, 2.94379802e+03,
              4.85219535e+03, 7.40609829e+03, 1.01888266e+04, 1.23722090e+04,
              1.33513379e+04, 1.32478236e+04, 1.21497905e+04, 1.00271115e+04,
              6.52890684e+03, 2.45498451e+03, 2.52158897e+02, 2.51603189e+00]] )
        self.nucharm['FLARE_14_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [8.47319700e+04, 1.13523980e+05, 1.73381749e+05, 2.26289159e+05,
              3.24745080e+05, 4.54256951e+05, 6.48863277e+05, 8.73961845e+05,
              1.14844198e+06, 1.53433431e+06, 1.95201661e+06, 2.47027864e+06,
              3.05722460e+06, 3.63490504e+06, 4.11023539e+06, 4.43653338e+06,
              4.49235931e+06, 4.17022996e+06, 3.48352842e+06, 2.48861701e+06,
              1.59164309e+06, 8.83046356e+05, 4.29253956e+05, 1.77692263e+05,
              6.05159022e+04, 1.43087334e+04, 2.54115944e+03, 1.29646896e+02],
             [7.42511040e-01, 1.32509215e+00, 2.61888575e+00, 4.39385424e+00,
              8.08768116e+00, 1.44507279e+01, 2.57399328e+01, 4.44664542e+01,
              7.34780630e+01, 1.25054496e+02, 2.00338688e+02, 3.18447561e+02,
              4.95020935e+02, 7.41788979e+02, 1.04800505e+03, 1.41746032e+03,
              1.79798264e+03, 2.09846298e+03, 2.21042402e+03, 1.98210262e+03,
              1.58865563e+03, 1.10293644e+03, 6.65006809e+02, 3.33048179e+02,
              1.36388406e+02, 3.39867040e+01, 6.65673834e+00, 4.06989351e-01]] )
        self.nucharm['FLARE_14_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [8.62527700e+04, 1.19976098e+05, 1.65946067e+05, 2.31196222e+05,
              3.20149445e+05, 4.39207833e+05, 5.73894972e+05, 7.51687277e+05,
              9.74612412e+05, 1.23000657e+06, 1.51004181e+06, 1.81692609e+06,
              2.08964323e+06, 2.38490066e+06, 2.63164410e+06, 2.75151534e+06,
              2.83238211e+06, 2.68470228e+06, 2.39266946e+06, 1.95113751e+06,
              1.38683468e+06, 8.27221505e+05, 4.25102616e+05, 1.69069990e+05,
              4.84148237e+04, 9.11473206e+03, 3.58195416e+02, 0.00000000e+00],
             [7.60434408e-01, 1.42845375e+00, 2.46920144e+00, 4.45091416e+00,
              7.95849106e+00, 1.38967621e+01, 2.31070297e+01, 3.81635017e+01,
              6.25815786e+01, 9.93170199e+01, 1.55422965e+02, 2.34736883e+02,
              3.39306558e+02, 4.88238338e+02, 6.74084019e+02, 8.93564973e+02,
              1.15390865e+03, 1.38288256e+03, 1.55326082e+03, 1.59107672e+03,
              1.41873931e+03, 1.07162118e+03, 6.96773395e+02, 3.57758408e+02,
              1.34492920e+02, 3.31658448e+01, 1.58532455e+00, 0.00000000e+00]] )
        self.nucharm['FLARE_14_D']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.07992500e+04, 5.82776580e+04, 8.22002759e+04, 1.24981969e+05,
              1.68642978e+05, 2.41125193e+05, 3.41441403e+05, 4.97670205e+05,
              7.36501574e+05, 1.06221347e+06, 1.53701830e+06, 2.24142915e+06,
              3.28244978e+06, 4.69425989e+06, 6.57705123e+06, 8.96290687e+06,
              1.17284221e+07, 1.41595292e+07, 1.54640688e+07, 1.49124270e+07,
              1.27883209e+07, 9.90038586e+06, 7.26687937e+06, 4.70580680e+06,
              2.38997855e+06, 6.84175330e+05, 6.29211745e+04, 3.63675692e+02],
             [3.63227479e-01, 6.85414308e-01, 1.22879942e+00, 2.40996228e+00,
              4.13931880e+00, 7.54731672e+00, 1.35701672e+01, 2.51644440e+01,
              4.72476941e+01, 8.60685655e+01, 1.56615200e+02, 2.89365349e+02,
              5.31236749e+02, 9.61921586e+02, 1.69577705e+03, 2.91086216e+03,
              4.78626033e+03, 7.28031353e+03, 9.98713038e+03, 1.20683107e+04,
              1.30732970e+04, 1.27757483e+04, 1.18603954e+04, 9.68506782e+03,
              6.08241271e+03, 2.10601584e+03, 2.03981098e+02, 1.14165582e+00]] )
        self.nucharm['FLARE_16_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [2.05124980e+04, 3.08573202e+04, 4.06010931e+04, 5.75537773e+04,
              8.28969731e+04, 1.14064358e+05, 1.70089707e+05, 2.17782134e+05,
              2.49308519e+05, 3.14369659e+05, 3.77360952e+05, 4.64835583e+05,
              4.86508911e+05, 4.96573681e+05, 4.32745505e+05, 3.25476395e+05,
              2.94463886e+05, 2.86848998e+05, 2.66365944e+05, 2.18641098e+05,
              1.45717231e+05, 6.64715329e+04, 1.97013538e+04, 3.38349912e+03,
              5.90154207e+01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
             [4.28401186e-02, 1.10717475e-01, 2.22819989e-01, 4.89244038e-01,
              1.03877114e+00, 2.03192244e+00, 4.27236785e+00, 7.33613101e+00,
              1.16444965e+01, 1.88805138e+01, 3.02282598e+01, 4.84289145e+01,
              6.77897134e+01, 8.92554371e+01, 9.96195406e+01, 9.33295357e+01,
              1.04075939e+02, 1.30853933e+02, 1.51973513e+02, 1.55062413e+02,
              1.30865724e+02, 7.69326132e+01, 3.19495356e+01, 7.92801509e+00,
              1.71508079e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]] )
        self.nucharm['FLARE_16_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [3.14568200e+04, 4.03488148e+04, 5.78523902e+04, 8.22074777e+04,
              1.06045970e+05, 1.49035331e+05, 1.77106865e+05, 2.13648518e+05,
              2.66363144e+05, 3.05458038e+05, 3.68600686e+05, 4.03397147e+05,
              4.30395968e+05, 4.09051654e+05, 4.15174171e+05, 4.30281722e+05,
              3.53887387e+05, 2.58140488e+05, 2.31993093e+05, 2.05843847e+05,
              1.69458770e+05, 1.31421863e+05, 7.75694211e+04, 2.26806335e+04,
              1.59023524e+03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
             [6.41683467e-02, 1.39902204e-01, 3.21925774e-01, 6.90007856e-01,
              1.29330373e+00, 2.72228641e+00, 4.42767731e+00, 7.20071650e+00,
              1.18384795e+01, 1.84611296e+01, 2.90561560e+01, 4.16989780e+01,
              5.92795816e+01, 7.43334075e+01, 9.89652758e+01, 1.28732373e+02,
              1.28296447e+02, 1.18326483e+02, 1.32197850e+02, 1.44003535e+02,
              1.46563055e+02, 1.44244158e+02, 1.10846214e+02, 4.36292733e+01,
              3.83513186e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]] )
        self.nucharm['FLARE_16_D']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [7.12187900e+03, 1.01073120e+04, 1.26666177e+04, 2.20667003e+04,
              2.70506466e+04, 4.21058611e+04, 6.36848096e+04, 1.00716526e+05,
              1.25625767e+05, 2.07191060e+05, 3.38830200e+05, 5.23716680e+05,
              7.91378963e+05, 9.42606150e+05, 8.65346209e+05, 7.12524864e+05,
              6.73387543e+05, 7.09462016e+05, 6.71931703e+05, 6.25928312e+05,
              5.19988705e+05, 3.63344037e+05, 2.30338620e+05, 1.40515319e+05,
              6.08757449e+04, 1.33575772e+04, 8.70076440e+02, 0.00000000e+00],
             [1.56774410e-02, 3.60866626e-02, 7.12249628e-02, 1.82665611e-01,
              3.34976114e-01, 7.70444724e-01, 1.59293071e+00, 3.30718616e+00,
              5.52612422e+00, 1.27916254e+01, 2.77079307e+01, 5.33536671e+01,
              1.12090279e+02, 1.71589493e+02, 2.02255083e+02, 2.12813730e+02,
              2.49952231e+02, 3.30155200e+02, 3.84264885e+02, 4.39726030e+02,
              4.59853786e+02, 3.98425946e+02, 3.15449167e+02, 2.40569856e+02,
              1.32351345e+02, 3.81424575e+01, 3.61042198e+00, 0.00000000e+00]] )
        self.nulight['FLARE_12_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.62751200e+05, 6.96821418e+05, 9.87066758e+05, 1.44412409e+06,
              2.08424322e+06, 2.93903557e+06, 4.04283627e+06, 5.39056963e+06,
              6.92107650e+06, 8.66000591e+06, 1.03284104e+07, 1.15787654e+07,
              1.19648669e+07, 1.14870276e+07, 1.01593936e+07, 8.32370410e+06,
              6.29044144e+06, 4.39442482e+06, 2.85357182e+06, 1.69244529e+06,
              9.35912309e+05, 4.61826237e+05, 2.01238609e+05, 7.46519158e+04,
              2.31025684e+04, 4.57366355e+03, 4.00873004e+02, 4.90733908e+00],
             [4.09384595e+00, 8.02991633e+00, 1.46726815e+01, 2.78194134e+01,
              5.10222299e+01, 9.17911544e+01, 1.59628894e+02, 2.68082021e+02,
              4.33497673e+02, 6.82207188e+02, 1.02426588e+03, 1.44682938e+03,
              1.88354932e+03, 2.27544405e+03, 2.53537081e+03, 2.61805590e+03,
              2.49358288e+03, 2.19795742e+03, 1.80620209e+03, 1.35641111e+03,
              9.48080830e+02, 5.89932412e+02, 3.23146478e+02, 1.50708370e+02,
              5.88193126e+01, 1.44927190e+01, 1.56940473e+00, 2.53851775e-02]] )
        self.nulight['FLARE_12_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [2.65678600e+05, 3.83518144e+05, 5.63567257e+05, 8.05591504e+05,
              1.17426077e+06, 1.67284553e+06, 2.37344101e+06, 3.23249637e+06,
              4.32053453e+06, 5.65878167e+06, 7.08287983e+06, 8.43941660e+06,
              9.33047435e+06, 9.61679603e+06, 9.27030280e+06, 8.32874710e+06,
              6.92245870e+06, 5.30895232e+06, 3.71113008e+06, 2.37362173e+06,
              1.36810055e+06, 7.00230470e+05, 3.17870378e+05, 1.22715296e+05,
              3.61679762e+04, 5.77772901e+03, 1.70388819e+02, 3.12058794e-01],
             [2.31801901e+00, 4.33104291e+00, 8.44004730e+00, 1.52878755e+01,
              2.83220068e+01, 5.10405510e+01, 9.15679280e+01, 1.56618307e+02,
              2.62432657e+02, 4.33245263e+02, 6.80881279e+02, 1.02190190e+03,
              1.42518369e+03, 1.85130474e+03, 2.24846961e+03, 2.55198386e+03,
              2.68242849e+03, 2.60847116e+03, 2.31832095e+03, 1.88085597e+03,
              1.37324459e+03, 8.84783445e+02, 5.02595883e+02, 2.42596874e+02,
              8.92471422e+01, 1.77256539e+01, 6.49206564e-01, 1.55818291e-03]] )
        self.nulight['FLARE_12_D']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [2.32636800e+05, 3.35575913e+05, 4.86648212e+05, 7.10060838e+05,
              1.01703327e+06, 1.45720307e+06, 2.04746411e+06, 2.74569051e+06,
              3.55150991e+06, 4.54489098e+06, 5.55574368e+06, 6.28791981e+06,
              6.66483754e+06, 6.53914770e+06, 5.93134130e+06, 4.98411105e+06,
              3.88555021e+06, 2.80702174e+06, 1.86341980e+06, 1.14622497e+06,
              6.37605554e+05, 3.22525815e+05, 1.47180515e+05, 5.63967962e+04,
              1.60377305e+04, 2.89003561e+03, 2.21852917e+02, 5.55171225e+00],
             [2.03920562e+00, 3.87687808e+00, 7.32791134e+00, 1.37177547e+01,
              2.46337017e+01, 4.51656384e+01, 7.99099295e+01, 1.34607166e+02,
              2.19788784e+02, 3.53741526e+02, 5.44389946e+02, 7.76153147e+02,
              1.03654772e+03, 1.27864092e+03, 1.46188462e+03, 1.54759989e+03,
              1.52258810e+03, 1.38524172e+03, 1.16585865e+03, 9.10679630e+02,
              6.42621076e+02, 4.11154802e+02, 2.36012424e+02, 1.12748395e+02,
              3.98340657e+01, 9.08717162e+00, 8.40301709e-01, 2.30344265e-02]] )
        self.nulight['FLARE_12_Q']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [5.18931300e+05, 7.70804245e+05, 1.12336738e+06, 1.61672946e+06,
              2.36423106e+06, 3.33993705e+06, 4.66390346e+06, 6.28029504e+06,
              8.20520187e+06, 1.03482240e+07, 1.24796781e+07, 1.40476471e+07,
              1.44974074e+07, 1.35194310e+07, 1.15970286e+07, 9.18563014e+06,
              6.79560684e+06, 4.65021480e+06, 2.92081331e+06, 1.67244974e+06,
              8.41532771e+05, 3.69928237e+05, 1.44860963e+05, 4.67221806e+04,
              1.08185766e+04, 1.30000108e+03, 4.72959391e+01, 1.77867311e-01],
             [4.69053049e+00, 8.87048388e+00, 1.65200206e+01, 3.06082985e+01,
              5.70271305e+01, 1.02387050e+02, 1.80978024e+02, 3.07333899e+02,
              5.04633468e+02, 8.02174891e+02, 1.21898347e+03, 1.73291268e+03,
              2.25154911e+03, 2.64613527e+03, 2.85325549e+03, 2.83924544e+03,
              2.64116472e+03, 2.27046280e+03, 1.79780203e+03, 1.30076672e+03,
              8.32156714e+02, 4.62300351e+02, 2.26720211e+02, 9.09602250e+01,
              2.61882089e+01, 3.98883823e+00, 1.69977018e-01, 8.64193295e-04]] )
        self.nulight['FLARE_12_E']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.84335500e+05, 6.51952234e+05, 9.59089187e+05, 1.40803007e+06,
              2.00787073e+06, 2.85835847e+06, 3.94132359e+06, 5.26938917e+06,
              6.85434001e+06, 8.60551178e+06, 1.04192390e+07, 1.18485595e+07,
              1.24715368e+07, 1.20838851e+07, 1.07637462e+07, 8.87497177e+06,
              6.72690438e+06, 4.71541705e+06, 3.02157105e+06, 1.78681002e+06,
              9.60146316e+05, 4.63437562e+05, 1.97463062e+05, 7.65452112e+04,
              2.42129169e+04, 5.38110153e+03, 6.50708590e+02, 1.06375467e+01],
             [4.41029701e+00, 7.64336095e+00, 1.43352084e+01, 2.71027777e+01,
              4.97319238e+01, 8.93088579e+01, 1.56971144e+02, 2.64981443e+02,
              4.35056793e+02, 6.89172939e+02, 1.05158384e+03, 1.50960632e+03,
              2.00117906e+03, 2.44277338e+03, 2.73603526e+03, 2.83147756e+03,
              2.69067332e+03, 2.36308006e+03, 1.89996274e+03, 1.41251944e+03,
              9.57374292e+02, 5.80122659e+02, 3.09656461e+02, 1.49183846e+02,
              5.92012330e+01, 1.64777525e+01, 2.52051607e+00, 4.95500533e-02]] )
        self.nulight['FLARE_14_P']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.16232700e+07, 4.93435019e+07, 5.71915938e+07, 6.61679011e+07,
              7.45034990e+07, 8.24936001e+07, 8.96321247e+07, 9.56938563e+07,
              1.00643364e+08, 1.02353267e+08, 1.00707374e+08, 9.60713839e+07,
              8.87899298e+07, 7.94160592e+07, 6.84207325e+07, 5.67545289e+07,
              4.55339372e+07, 3.47231029e+07, 2.49526801e+07, 1.65363519e+07,
              1.06449902e+07, 6.64318723e+06, 3.63727792e+06, 1.74037521e+06,
              7.54688264e+05, 3.00697595e+05, 8.21725253e+04, 3.21892532e+03],
             [3.75072217e+02, 5.85093495e+02, 8.80491894e+02, 1.31282800e+03,
              1.89363405e+03, 2.68311007e+03, 3.70607607e+03, 5.02819693e+03,
              6.70428030e+03, 8.60956618e+03, 1.07061020e+04, 1.28683156e+04,
              1.49902010e+04, 1.68765976e+04, 1.82953020e+04, 1.90592127e+04,
              1.92892125e+04, 1.86236072e+04, 1.68961822e+04, 1.40880395e+04,
              1.15408825e+04, 9.23724085e+03, 6.39287222e+03, 3.86049507e+03,
              2.11291525e+03, 1.06153551e+03, 3.59440586e+02, 1.72431588e+01]] )
        self.nulight['FLARE_14_S']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [2.56987700e+07, 3.10471031e+07, 3.65393238e+07, 4.31817479e+07,
              4.98132804e+07, 5.61763782e+07, 6.12247530e+07, 6.54279904e+07,
              6.80385265e+07, 6.88509863e+07, 6.73648915e+07, 6.41376773e+07,
              5.98936100e+07, 5.46543796e+07, 4.89061235e+07, 4.29271121e+07,
              3.67865382e+07, 3.03368061e+07, 2.39037844e+07, 1.76192376e+07,
              1.21925432e+07, 7.87509700e+06, 4.38263844e+06, 2.06040085e+06,
              8.88977789e+05, 3.43613897e+05, 5.92364109e+04, 4.41149189e+02],
             [2.32149888e+02, 3.68997731e+02, 5.64273002e+02, 8.59745887e+02,
              1.27214735e+03, 1.83826706e+03, 2.55044885e+03, 3.46133323e+03,
              4.56738190e+03, 5.84625171e+03, 7.23000402e+03, 8.68000718e+03,
              1.02228734e+04, 1.17581482e+04, 1.32751084e+04, 1.46874200e+04,
              1.58847845e+04, 1.66146377e+04, 1.65320898e+04, 1.53304878e+04,
              1.34319090e+04, 1.10116857e+04, 7.70673787e+03, 4.53500602e+03,
              2.47552289e+03, 1.21956031e+03, 2.60900649e+02, 2.36315067e+00]] )
        self.nulight['FLARE_14_D']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [3.49976000e+07, 4.20273704e+07, 4.99352135e+07, 5.83283114e+07,
              6.68574006e+07, 7.46965006e+07, 8.17046912e+07, 8.68927526e+07,
              8.99316662e+07, 8.98452470e+07, 8.62668190e+07, 8.00127692e+07,
              7.17154344e+07, 6.20258629e+07, 5.19779570e+07, 4.21241511e+07,
              3.31047133e+07, 2.48981553e+07, 1.77287534e+07, 1.15726419e+07,
              7.27133410e+06, 4.44332471e+06, 2.43198025e+06, 1.18059992e+06,
              5.30458501e+05, 2.11340526e+05, 4.55185191e+04, 2.05483382e+03],
             [3.15523597e+02, 4.97274423e+02, 7.67437606e+02, 1.15697821e+03,
              1.70386500e+03, 2.43429257e+03, 3.38769268e+03, 4.57644918e+03,
              6.00041310e+03, 7.57829215e+03, 9.19474371e+03, 1.07475299e+04,
              1.21309724e+04, 1.32092353e+04, 1.39166456e+04, 1.41768859e+04,
              1.40284656e+04, 1.33405476e+04, 1.20178796e+04, 9.84140864e+03,
              7.85278752e+03, 6.14276309e+03, 4.25010318e+03, 2.60234195e+03,
              1.47003007e+03, 7.38799972e+02, 1.96121665e+02, 1.09084437e+01]] )
        self.nulight['FLARE_14_Q']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.81391100e+07, 5.76207480e+07, 6.89520577e+07, 8.11740956e+07,
              9.40595883e+07, 1.05618608e+08, 1.15466079e+08, 1.22323568e+08,
              1.25736927e+08, 1.24557001e+08, 1.18407986e+08, 1.09057692e+08,
              9.71740909e+07, 8.49962662e+07, 7.20977506e+07, 5.84142009e+07,
              4.50891742e+07, 3.29319060e+07, 2.27357709e+07, 1.45935832e+07,
              9.05960224e+06, 5.20553332e+06, 2.43582369e+06, 1.00844344e+06,
              3.72640436e+05, 1.01788583e+05, 1.41603075e+04, 1.62101300e+02],
             [4.29994811e+02, 6.74536460e+02, 1.04652622e+03, 1.58442098e+03,
              2.34804725e+03, 3.35601706e+03, 4.66611786e+03, 6.27879627e+03,
              8.17662203e+03, 1.02598079e+04, 1.23252207e+04, 1.43480769e+04,
              1.61444630e+04, 1.77989377e+04, 1.90341077e+04, 1.94679872e+04,
              1.90201667e+04, 1.76417818e+04, 1.53952593e+04, 1.24142238e+04,
              9.78350125e+03, 7.12490687e+03, 4.16244500e+03, 2.14140655e+03,
              9.89633969e+02, 3.38158611e+02, 5.77564913e+01, 7.54484575e-01]] )
        self.nulight['FLARE_14_E']=np.array(
            [[1.13363550e+01, 1.43134300e+01, 1.80195550e+01, 2.26852050e+01,
              2.85590150e+01, 3.59536500e+01, 4.52630000e+01, 5.69827400e+01,
              7.17370750e+01, 9.03115600e+01, 1.13695300e+02, 1.43134300e+02,
              1.80195550e+02, 2.26852050e+02, 2.85590150e+02, 3.59536500e+02,
              4.52630000e+02, 5.69827400e+02, 7.17370750e+02, 9.03115600e+02,
              1.13695300e+03, 1.43134300e+03, 1.80195550e+03, 2.26852050e+03,
              2.85590150e+03, 3.59536500e+03, 4.52630000e+03, 5.69827400e+03],
             [4.92428300e+07, 5.85996629e+07, 6.79848783e+07, 7.80879694e+07,
              8.71718257e+07, 9.54240458e+07, 1.02049018e+08, 1.07570902e+08,
              1.10887239e+08, 1.10569247e+08, 1.06883910e+08, 9.99757234e+07,
              9.08606098e+07, 8.03345221e+07, 6.87494550e+07, 5.72651195e+07,
              4.55823975e+07, 3.42865212e+07, 2.42758651e+07, 1.56941829e+07,
              9.74711460e+06, 5.80451445e+06, 3.09706299e+06, 1.50004106e+06,
              6.66413289e+05, 2.54474599e+05, 7.52987580e+04, 8.54715211e+03],
             [4.43517148e+02, 6.91393991e+02, 1.04230175e+03, 1.54349371e+03,
              2.20908822e+03, 3.08527747e+03, 4.20342239e+03, 5.62450292e+03,
              7.34470054e+03, 9.28305294e+03, 1.13345507e+04, 1.33932005e+04,
              1.53825025e+04, 1.71463634e+04, 1.85058998e+04, 1.94408778e+04,
              1.95291920e+04, 1.85316208e+04, 1.65132700e+04, 1.33334920e+04,
              1.03941727e+04, 7.80298128e+03, 5.17994863e+03, 3.11777633e+03,
              1.74063264e+03, 8.32453138e+02, 3.13299006e+02, 4.48197595e+01]] )
              
        # fix bug:
        for gen in ["E","S","P","Q","D"]:
            for pid in ["12","14"]:
                self.nulight["FLARE_"+pid+"_"+gen][1]*=0.1
        for gen in ["S","P","D"]:
            for pid in ["12","14","16"]:
                self.nucharm["FLARE_"+pid+"_"+gen][1]*=0.1
        # end bugfix
        
        self.nu_xsecs = np.array([
               [7.89746957e+00, 8.68721652e+00, 9.55593818e+00, 1.05115320e+01,
                1.15626852e+01, 1.27189537e+01, 1.39908491e+01, 1.53899340e+01,
                1.69289274e+01, 1.86218201e+01, 2.04840021e+01, 2.25324024e+01,
                2.47856426e+01, 2.72642069e+01, 2.99906275e+01, 3.29896903e+01,
                3.62886593e+01, 3.99175253e+01, 4.39092778e+01, 4.83002056e+01,
                5.31302261e+01, 5.84432487e+01, 6.42875736e+01, 7.07163310e+01,
                7.77879641e+01, 8.55667605e+01, 9.41234365e+01, 1.03535780e+02,
                1.13889358e+02, 1.25278294e+02, 1.37806123e+02, 1.51586736e+02,
                1.66745409e+02, 1.83419950e+02, 2.01761945e+02, 2.21938140e+02,
                2.44131954e+02, 2.68545149e+02, 2.95399664e+02, 3.24939630e+02,
                3.57433594e+02, 3.93176953e+02, 4.32494648e+02, 4.75744113e+02,
                5.23318524e+02, 5.75650377e+02, 6.33215414e+02, 6.96536956e+02,
                7.66190651e+02, 8.42809717e+02, 9.27090688e+02, 1.01979976e+03,
                1.12177973e+03, 1.23395771e+03, 1.35735348e+03, 1.49308882e+03,
                1.64239771e+03, 1.80663748e+03, 1.98730123e+03, 2.18603135e+03,
                2.40463448e+03, 2.64509793e+03, 2.90960772e+03, 3.20056850e+03,
                3.52062535e+03, 3.87268788e+03, 4.25995667e+03, 4.68595233e+03,
                5.15454757e+03, 5.67000233e+03, 6.23700256e+03, 6.86070281e+03,
                7.54677309e+03, 8.30145040e+03, 9.13159544e+03, 1.00447550e+04],
               [6.47186107e-38, 7.04315407e-38, 7.67979172e-38, 8.37184828e-38,
                9.13925465e-38, 9.98400815e-38, 1.09003937e-37, 1.19242841e-37,
                1.30386750e-37, 1.42720295e-37, 1.56217270e-37, 1.71033845e-37,
                1.87405480e-37, 2.05329027e-37, 2.25069669e-37, 2.46765854e-37,
                2.70587605e-37, 2.96780049e-37, 3.25556661e-37, 3.57146324e-37,
                3.91872226e-37, 4.29935201e-37, 4.71833590e-37, 5.17791743e-37,
                5.68222058e-37, 6.23593898e-37, 6.84365328e-37, 7.51108587e-37,
                8.24264034e-37, 9.04615992e-37, 9.92677123e-37, 1.08924945e-36,
                1.19520855e-36, 1.31143992e-36, 1.43876254e-36, 1.57826283e-36,
                1.73119096e-36, 1.89871891e-36, 2.08226419e-36, 2.28311358e-36,
                2.50300808e-36, 2.74367910e-36, 3.00700987e-36, 3.29487174e-36,
                3.60956478e-36, 3.95364309e-36, 4.32933241e-36, 4.73934388e-36,
                5.18703120e-36, 5.67510165e-36, 6.20726834e-36, 6.78716658e-36,
                7.41831246e-36, 8.10499974e-36, 8.85209334e-36, 9.66337608e-36,
                1.05437946e-35, 1.14998117e-35, 1.25352599e-35, 1.36565098e-35,
                1.48705131e-35, 1.61824227e-35, 1.75980126e-35, 1.91269287e-35,
                2.07748663e-35, 2.25326593e-35, 2.44338830e-35, 2.64831339e-35,
                2.86827559e-35, 3.10476809e-35, 3.35839316e-35, 3.63038532e-35,
                3.92305089e-35, 4.23740065e-35, 4.57604897e-35, 4.94296632e-35],
               [2.97681411e-38, 3.23067325e-38, 3.50508962e-38, 3.80512299e-38,
               4.13045207e-38, 4.48685324e-38, 4.87906169e-38, 5.30858621e-38,
               5.78242776e-38, 6.30001379e-38, 6.86998230e-38, 7.49604747e-38,
               8.18941220e-38, 8.94954511e-38, 9.78995544e-38, 1.07173472e-37,
               1.17333446e-37, 1.28566687e-37, 1.40945713e-37, 1.54578018e-37,
               1.69666216e-37, 1.86234572e-37, 2.04547404e-37, 2.24749737e-37,
               2.46977298e-37, 2.71471166e-37, 2.98492717e-37, 3.28228096e-37,
               3.61011874e-37, 3.97155782e-37, 4.36946843e-37, 4.80745022e-37,
               5.29025601e-37, 5.82202284e-37, 6.40741945e-37, 7.05159778e-37,
               7.76084442e-37, 8.54128571e-37, 9.40019558e-37, 1.03447573e-36,
               1.13841097e-36, 1.25268367e-36, 1.37836917e-36, 1.51647960e-36,
               1.66829584e-36, 1.83520939e-36, 2.01844803e-36, 2.21982499e-36,
               2.44099220e-36, 2.68372891e-36, 2.95016993e-36, 3.24261016e-36,
               3.56337134e-36, 3.91513484e-36, 4.30089226e-36, 4.72361215e-36,
               5.18673788e-36, 5.69411797e-36, 6.24957786e-36, 6.85744060e-36,
               7.52296944e-36, 8.25121742e-36, 9.04618472e-36, 9.91589348e-36,
               1.08673497e-35, 1.18895440e-35, 1.30148061e-35, 1.42507081e-35,
               1.55986365e-35, 1.70716150e-35, 1.86792658e-35, 2.04317736e-35,
               2.23474035e-35, 2.44391695e-35, 2.67226154e-35, 2.92228871e-35],
              [1.23871731e-38, 1.52172538e-38, 1.84930418e-38, 2.22404402e-38,
               2.65783770e-38, 3.16523824e-38, 3.74185940e-38, 4.39612284e-38,
               5.14626343e-38, 6.00107329e-38, 6.96583201e-38, 8.06404094e-38,
               9.29156122e-38, 1.06812942e-37, 1.22441286e-37, 1.39909724e-37,
               1.59443100e-37, 1.81207008e-37, 2.05496149e-37, 2.32594373e-37,
               2.62755080e-37, 2.96126147e-37, 3.33194892e-37, 3.74304786e-37,
               4.19754934e-37, 4.70053284e-37, 5.25731551e-37, 5.87091815e-37,
               6.54847955e-37, 7.29536875e-37, 8.11948744e-37, 9.02743956e-37,
               1.00267816e-36, 1.11277600e-36, 1.23378603e-36, 1.36696493e-36,
               1.51330614e-36, 1.67410169e-36, 1.85049289e-36, 2.04417020e-36,
               2.25665561e-36, 2.48976877e-36, 2.74509708e-36, 3.02488680e-36,
               3.33116370e-36, 3.66630536e-36, 4.03295098e-36, 4.43368290e-36,
               4.87170365e-36, 5.34959859e-36, 5.87106713e-36, 6.43970917e-36,
               7.05925954e-36, 7.73392610e-36, 8.46806234e-36, 9.26566041e-36,
               1.01322854e-35, 1.10733641e-35, 1.20933489e-35, 1.31981301e-35,
               1.43943213e-35, 1.56879988e-35, 1.70845169e-35, 1.85934522e-35,
               2.02188546e-35, 2.19632307e-35, 2.38492681e-35, 2.58757091e-35,
               2.80519358e-35, 3.03919704e-35, 3.29020171e-35, 3.55981598e-35,
               3.84971903e-35, 4.16150962e-35, 4.49794050e-35, 4.86200983e-35],
              [5.07853013e-39, 6.44992846e-39, 8.01751793e-39, 9.80009447e-39,
               1.18601400e-38, 1.41545389e-38, 1.67977801e-38, 1.97122901e-38,
               2.30136314e-38, 2.67509178e-38, 3.08424045e-38, 3.55240299e-38,
               4.06924873e-38, 4.65102480e-38, 5.30322418e-38, 6.02626823e-38,
               6.84010862e-38, 7.74210969e-38, 8.75242134e-38, 9.88082851e-38,
               1.11348086e-37, 1.25378510e-37, 1.40902086e-37, 1.58264386e-37,
               1.77544085e-37, 1.98936249e-37, 2.22774836e-37, 2.49115989e-37,
               2.78256280e-37, 3.10563441e-37, 3.46460869e-37, 3.86264724e-37,
               4.30367760e-37, 4.79250367e-37, 5.33342124e-37, 5.93226618e-37,
               6.59371248e-37, 7.32591735e-37, 8.13425201e-37, 9.02733719e-37,
               1.00134519e-36, 1.11012647e-36, 1.23009531e-36, 1.36241112e-36,
               1.50825710e-36, 1.66889006e-36, 1.84590363e-36, 2.04063827e-36,
               2.25497679e-36, 2.49082271e-36, 2.75015706e-36, 3.03524901e-36,
               3.34818653e-36, 3.69206175e-36, 4.06994567e-36, 4.48379715e-36,
               4.93846039e-36, 5.43704081e-36, 5.98317520e-36, 6.58166612e-36,
               7.23708749e-36, 7.95464821e-36, 8.73927813e-36, 9.59832132e-36,
               1.05366623e-35, 1.15564769e-35, 1.26773910e-35, 1.39017369e-35,
               1.52368835e-35, 1.66978052e-35, 1.82917626e-35, 2.00317021e-35,
               2.19328027e-35, 2.40097026e-35, 2.62793310e-35, 2.87622357e-35]])

    #***************************************
    # Related to Data and Plotting Keys
    #***************************************
    
    def read_plotkeys(self, datfile):
        import re
        re_begin = re.compile("#*\s*BEGIN\s+PLOT\s*(\w*)")
        re_comment = re.compile("#.*")
        re_attr = re.compile("(\w+)\s*=\s*(.*)")
        re_end = re.compile("#*\s*END\s+PLOT\s*(\w*)")
        plotkeys = {}
        with open(datfile) as f:
            inplot = False
            name = None
            for line in f:
                line_list = [l.strip() for l in line.split( )]
                l = line.strip()
                if re_begin.match(l):
                    inplot = True
                    #name = re_begin.match(l).group(1)
                    name = line_list[-1]
                elif re_end.match(l):
                    inplot = False
                    name = None
                elif re_comment.match(l):
                    continue
                elif inplot:
                    m = re_attr.match(l)
                    if m is None: continue
                    plotkeys.setdefault(name, {})[m.group(1)] = m.group(2)
        return plotkeys
    
    def add_plotkey(self, hist, ax):
        # read data
        plotfile = "files-yoda/"+hist.split("/")[0] + ".plot"
        plotkeys = self.read_plotkeys(plotfile)
        plotkey  = plotkeys["/"+hist]
        # format figure
        if 'LogX' in plotkey and plotkey['LogX']=='1': ax.set_xscale("log")
        if 'LogY' in plotkey and plotkey['LogY']=='1': ax.set_yscale("log")
        xmin, xmax, ymin, ymax = None, None, None, None
        if 'XMin' in plotkey: xmin = float(plotkey['XMin'])
        if 'XMax' in plotkey: xmax = float(plotkey['XMax'])
        if 'YMin' in plotkey: ymin = float(plotkey['YMin'])
        if 'YMax' in plotkey: ymax = float(plotkey['YMax'])
        ax.set_xlim(xmin,xmax)
        ax.set_ylim(ymin,ymax)
        if 'Title'  in plotkey: ax.set_title(plotkey['Title'])
        if 'XLabel' in plotkey: ax.set_xlabel(str(plotkey['XLabel']))
        if 'YLabel' in plotkey: ax.set_ylabel(str(plotkey['YLabel']))
    
    
    def add_data(self, ax, analysis="LHCB_2015_I1396331", histogram="d01-x01-y01", factor=1):
        filename = "files-yoda/"+analysis+".yoda"
        found=False
        xVals, yVals, xErrs, yErrs = [], [], [], []
        with open(filename) as f:
            for line in f:
                if len(line)==0: continue
                if line[0]=='#': continue
                words = [elt.strip() for elt in line.split( )]
                if len(words)==0: continue
                if words[0]=='Title:': continue
                if words[0]=='Type:': continue
                if words[0]=='---': continue
                if words[0]=="Path:":
                    _,_,ana,histo = code = words[1].split('/')
                    if histo==histogram and ana==analysis: found=True
                    continue
                if found and line[:3]=="END": break
                if found:
                    numbers = [float(elt.strip()) for elt in line.split( )]
                    xVals.append(numbers[0])
                    yVals.append(numbers[3])
                    xErrs.append([numbers[1],numbers[2]])
                    yErrs.append([numbers[4],numbers[5]])
        xVals, yVals, xErrs, yErrs = np.array(xVals), np.array(yVals), np.array(xErrs), np.array(yErrs)
        xEdges = [xval - xerr[0] for xval, xerr in zip(xVals, xErrs)]+[xVals[-1]+ xErrs[-1][1]]
        ax.errorbar(x=xVals, y=yVals*factor, xerr=xErrs.T, yerr=yErrs.T*factor, c="k", capsize=1, elinewidth=1, visible=False)
        return xVals, yVals, xErrs, yErrs, xEdges
    
    
    # adds rivet data. This needs the yoda library, but one cna probably write another funuction for this
    """
    def add_data(self, hist, ax, factor=1):
        thisfile = yoda.read("files-yoda/DATA.yoda")
        data = thisfile["/REF/" + hist]
        xVals, yVals = data.xVals(), data.yVals()
        xErrs, yErrs = data.xErrs(), data.yErrs()
        xEdges = [xval - xerr[0] for xval, xerr in zip(xVals, xErrs)]+[xVals[-1]+ xErrs[-1][1]]
        ax.errorbar(x=xVals, y=yVals*factor, xerr=xErrs.T, yerr=yErrs.T*factor, c="k", capsize=1, elinewidth=1, visible=False)
        return xVals, yVals, xErrs, yErrs, xEdges
    """
    #***************************************
    # Main Plotting Fuction
    #***************************************
    
    def plot_histos(self, histograms, models, filename=None, ncols=3, do_show=True):
        
        # predefined set
        customized='none'
        
        if histograms=='use':
            customized='use'
            histograms = [
                ["LHCb_sum", "421"],
                ["FLARE"   , "12", 100],
            ]
            
        if histograms=='summary':
            histograms = [
                ["LHCb_sum", "421"],
                ["LHCb_sum", "411"],
                ["FLARE"   , "12", 100],
                ["FLARE_N" , "12", 100],
            ]

        if histograms=='details':
            histograms = [
                ["LHCb_sum", "421"],
                ["LHCb_sum", "411"],
                ["LHCb_sum", "431"],
                ["flav_sum", "411"],
                ["flav_sum", "431"],
                ["flavor"  , "ALICE_2022_I1868463/d05-x01-y01"],
                ["FLARE"   , "12", 100],
                ["FLARE"   , "14", 100],
                ["FLARE"   , "16", 100],
            ]

        if histograms=='all':
            histograms = [
                # pT histograms from LHCb analysis
                ["LHCb_sum", "421"],
                ["LHCb_sum", "411"],
                ["LHCb_sum", "431"],
                # flavor
                ["flav_sum", "411"],
                ["flav_sum", "431"],
                ["flavor",  "ALICE_2022_I1868463/d05-x01-y01"],
                # user defined pT histograms
                ["pt"     , "411", 6, 6.5],
                ["pt"     , "411", 7, 7.5],
                ["pt"     , "411", 8, 8.5],
                # user defined y histograms
                ["y"      , "411", 0, 0.5],
                ["y"      , "411", 1, 1.5],
                ["y"      , "411", 2, 2.5],
                # neutrino flux through FLARE
                ["FLARE"  , "12", 100],
                ["FLARE"  , "14", 100],
                ["FLARE"  , "16", 100],
                # neutrinos interacting with FLARE
                ["FLARE_N", "12", 100],
                ["FLARE_N", "14", 100],
                ["FLARE_N", "16", 100],
            ]
            
        # setup figure
        matplotlib.rcParams.update({'font.size': 17})
        matplotlib.rcParams['text.usetex'] = False
        nrows = int(len(histograms)/ncols) #+ 1
        if len(histograms)%ncols>0: nrows+=1
        fig = plt.figure(figsize=(ncols*8,6*nrows))
        
        # loop over histograms
        for ihist,hist in enumerate(histograms):
            ax = plt.subplot(nrows,ncols,ihist+1)
            if hist[0] == "LHCb_pt" :  self.plot_histos_exp_pt(hist[1], models, ax)
            if hist[0] == "pt"      :  self.plot_histos_pt(hist[1:], models, ax)
            if hist[0] == "y"       :  self.plot_histos_y(hist[1:], models, ax)
            if hist[0] == "eta85"   :  self.plot_histos_faser(hist[1:], models, "eta85", ax, interact=False)
            if hist[0] == "FASERv"  :  self.plot_histos_faser(hist[1:], models, "FASERv", ax, interact=False)
            if hist[0] == "FLARE"   :  self.plot_histos_faser(hist[1:], models, "FLARE", ax, interact=False)
            if hist[0] == "FASERv_N":  self.plot_histos_faser(hist[1:], models, "FASERv", ax, interact=True)
            if hist[0] == "FLARE_N" :  self.plot_histos_faser(hist[1:], models, "FLARE", ax, interact=True)
            if hist[0] == "LHCb_sum":  self.plot_histos_summary_pt(hist[1], models, ax)
            if hist[0] == "flavor"  :  self.plot_histos_exp_flavor(hist[1], models, ax)
            if hist[0] == "flav_sum":  self.plot_histos_summary_flavor(hist[1], models, ax)
        
        # finish figure
        if customized=='use': plt.subplots_adjust(left=0.07, right=0.985, bottom=0.11, top=0.935)
        else: plt.tight_layout()
        if filename is not None: fig.savefig(filename)
        if do_show: plt.show()
        else: plt.close()

    #***************************************
    # Get Histogram from Simulation
    #***************************************
        
    def get_ptbins_from_simuation(self, sample, pid, xVals, xErrs, ymin, ymax, perdy=True, onlyplus=False, factor=1):
        # initiate
        values = []
        # load data
        datafile = "files/"+sample+"/"+sample+"_"+pid+".txt"
        fP = read_and_interpolate2d(datafile,conversion=1)
        datafile = "files/"+sample+"/"+sample+"_-"+pid+".txt"
        fM = read_and_interpolate2d(datafile,conversion=1)
        # loop through pT bins
        for ptcenter, pterror in zip(xVals, xErrs):
            ptmin = ptcenter-pterror[0]
            ptmax = ptcenter+pterror[1]
            xsP = integrate_dydpt(fP,ymin,ymax,ptmin,ptmax,manual=True)
            xsM = integrate_dydpt(fM,ymin,ymax,ptmin,ptmax,manual=True)
            if onlyplus: xs = xsP
            else:  xs = xsP+xsM
            if perdy: values.append([ptcenter, xs/(ptmax-ptmin)/(ymax-ymin)*factor])
            else: values.append([ptcenter, xs/(ptmax-ptmin)*factor])
        return values
            
    def get_ybins_from_simuation(self, sample, pid, xVals, xErrs, ptmin, ptmax, perdx=True, onlyplus=False):
        # initiate
        values = []
        # load data
        datafile = "files/"+sample+"/"+sample+"_"+pid+".txt"
        fP = read_and_interpolate2d(datafile,conversion=1)
        datafile = "files/"+sample+"/"+sample+"_-"+pid+".txt"
        fM = read_and_interpolate2d(datafile,conversion=1)
        # loop through pT bins
        for ptcenter, pterror in zip(xVals, xErrs):
            ymin = ptcenter-pterror[0]
            ymax = ptcenter+pterror[1]
            xsP = integrate_dydpt(fP,ymin,ymax,ptmin,ptmax,manual=True)
            xsM = integrate_dydpt(fM,ymin,ymax,ptmin,ptmax,manual=True)
            if onlyplus: xs = xsP
            else:  xs = xsP+xsM
            if perdx: values.append([ptcenter, xs/(ptmax-ptmin)/(ymax-ymin)])
            else: values.append([ptcenter, xs/(ymax-ymin)])
        return values
            
    #***************************************
    # Get pT Histograms
    #***************************************
    
    def make_line(self, xEdges, values):
        xvals,yvals = [],[]
        for x in xEdges:
            xvals.append(x)
            xvals.append(x)
        for w in values:
            yvals.append(w)
            yvals.append(w)
        return xvals[1:-1], yvals
    
    
    def plot_histos_summary_pt(self, particle, models, ax):
        
        # define LHCb analyses
        labels = {"421":"$D_0 + \\bar{D}_0$", "411":"$D^+ + D^-$", "431":"$D_s + D_s^-$"}
        ids_lhcb_13 = {"421":"1", "411":"2", "431":"3"}
        pids_lhcb_13 = {1:"421", 2: "411", 3: "431"}
        histograms = ["LHCB_2015_I1396331/d0"+ids_lhcb_13[particle]+"-x01-y0"+str(j) for j in [1,3,5]]
        perdy, onlyplus, factor = True,  False, 1.
        
        # loop over analysis
        for ihist, hist in enumerate(histograms):
            id_particle, id_rapidity = int(hist.split("/")[1][2]), int(hist.split("/")[1][10])
            pid=pids_lhcb_13[id_particle]
            ymin, ymax = 1.5+id_rapidity*0.5, 2.0+id_rapidity*0.5
            correction = 10**(-ihist)
        
            # add data
            analysis = hist[:-12]
            histogram = hist[-11:]
            xVals, yVals, xErrs, yErrs, xEdges = self.add_data(ax, analysis=analysis,histogram=histogram, factor=correction)
        
            # add simulation
            for sample, label, col, ls, lw in models:
                values = np.array(self.get_ptbins_from_simuation(sample, pid, xVals, xErrs, ymin, ymax, perdy, onlyplus, factor=correction))
                if ihist>0: label=None
                ax.hist(values.T[0], weights=values.T[1]*1e-6, bins=xEdges, histtype='step', color=col, ls=ls)
                ax.plot([-1,-1], [0,0], label=label, color=col, ls=ls)
        
        # finish plot
        if particle=="421": ax.text(14.8 , 0.35 , "$2<\eta<2.5$", color="k", ha="right", va="top"   ,fontsize=14)
        if particle=="421": ax.text(14.8 , 0.012, "$3<\eta<3.5$", color="k", ha="right", va="bottom",fontsize=14)
        if particle=="421": ax.text(6.25 , 0.012, "$4<\eta<4.5$", color="k", ha="right", va="bottom",fontsize=14)
        ax.set_title(r"LHCb 13 TeV: "+labels[particle])
        ax.set_xlabel(r"$p_T$ [GeV]")
        ax.set_ylabel(r"$d\sigma/dp_Tdy$ [$\mu$b/GeV]")
        ax.set_yscale("log")
        if particle == "421": ax.set_xlim(0,15)
        if particle == "411": ax.set_xlim(1,15)
        if particle == "431": ax.set_xlim(1,14)
        ax.set_ylim(1e-2, 1e3)
        ax.legend(frameon=False,labelspacing=0)
        
    def plot_histos_summary_flavor(self, particle, models, ax):
        
        # define LHCb analyses
        labels = {"421":"$D_0 \\to K^-\pi^+$", "411":"$D^+ \\to K^-\pi^+ \pi^+$", "431":"$D_s^+ \\to [K^+ K^0]_\phi \pi^+$"}
        ids_lhcb_13 = {"411":"09", "431":"10"}
        factors_13 = {"411":0.0938*100/0.03947, "431":0.045*100/0.03947}
        histograms = ["LHCB_2015_I1396331/d"+ids_lhcb_13[particle]+"-x01-y0"+str(j) for j in [1,3,5]]
        factors = {"411":0.0938*100/0.03947, "431":0.045*100/0.03947}
        perdy, onlyplus, factor = True,  False, 1.
        
        # loop over analysis
        for ihist, hist in enumerate(histograms):
            id_rapidity = int(hist.split("/")[1][10])
            pid=particle
            ymin, ymax = 1.5+id_rapidity*0.5, 2.0+id_rapidity*0.5
            correction = 5**(-ihist)
        
            # add data
            analysis = hist[:-12]
            histogram = hist[-11:]
            xVals, yVals, xErrs, yErrs, xEdges = self.add_data(ax, analysis=analysis,histogram=histogram, factor=correction)
        
            # add simulation
            for sample, label, col, ls, lw in models:
                values1 = np.array(self.get_ptbins_from_simuation(sample, pid  , xVals, xErrs, ymin, ymax, perdy, onlyplus, factors[pid]*correction))
                values0 = np.array(self.get_ptbins_from_simuation(sample, "421", xVals, xErrs, ymin, ymax, perdy, onlyplus, factor=1))
                values = values1.T[1]/values0.T[1]
                xvals,yvals =  self.make_line(xEdges, values)
                #ax.hist(values1.T[0], weights=weights, bins=xEdges, histtype='step', color=col, ls=ls)
                ax.plot(xvals, yvals, color=col, ls=ls,lw=1)
                if ihist>0: label=None
                ax.plot([-1,-1], [0,0], label=label, color=col, ls=ls)
        
        # finish plot
        #if particle=="411": ax.text(14.8 , 0.35 , "$2<\eta<2.5$", color="k", ha="right", va="top"   ,fontsize=14)
        #if particle=="411": ax.text(14.8 , 0.012, "$3<\eta<3.5$", color="k", ha="right", va="bottom",fontsize=14)
        #if particle=="411": ax.text(6.25 , 0.012, "$4<\eta<4.5$", color="k", ha="right", va="bottom",fontsize=14)
        ax.set_title(r"LHCb 13 TeV: "+labels[particle]+"/"+labels["421"])
        ax.set_xlabel(r"$p_T$ [GeV]")
        ax.set_ylabel(r"Cross Section Ratio [%]")
        ax.set_yscale("log")
        ax.set_xlim(0,15)
        if particle=="411": ax.set_ylim(2, 300)
        if particle=="431": ax.set_ylim(0.1,50)
        ax.legend(frameon=False,labelspacing=0)
        
    def plot_histos_exp_flavor(self, hist, models, ax):
        
        #check if LHCb analysis:
        pids_lhcb_13 = {"09":"411", "10": "431"}
        histograms_lhcb_13 = ["LHCB_2015_I1396331/d"+i+"-x01-y0"+str(j) for i in ["09","10"] for j in range(1,6)]
        #check if ALICE analysis:
        pids_alice_13 = {"05":"4122"}
        histograms_alice_13 = ["ALICE_2022_I1868463/d05-x01-y01"]

        id_particle, id_rapidity = hist.split("/")[1][1:3], int(hist.split("/")[1][10])
        if   hist in histograms_lhcb_13:
            pid = pids_lhcb_13[id_particle]
            factors = {"411":0.0938*100/0.03947, "431":0.045*100/0.03947}
            perdy, onlyplus, factor =  True, False, 1.
        elif hist in histograms_alice_13:
            pid = pids_alice_13[id_particle]
            factors = {"4122":1}
            perdy, onlyplus, factor =  True, False, 1.
        else: return

        if   hist in histograms_lhcb_13: ymin, ymax = 1.5+id_rapidity*0.5, 2.0+id_rapidity*0.5
        elif hist in histograms_alice_13: ymin, ymax = 0, 0.5
        else: return
        
        # add data
        analysis = hist[:-12]
        histogram = hist[-11:]
        xVals, yVals, xErrs, yErrs, xEdges = self.add_data(ax, analysis=analysis,histogram=histogram)
        
        
        # add simulation
        for sample, label, col, ls, lw in models:
            values1 = np.array(self.get_ptbins_from_simuation(sample, pid  , xVals, xErrs, ymin, ymax, perdy, onlyplus, factors[pid]))
            values0 = np.array(self.get_ptbins_from_simuation(sample, "421", xVals, xErrs, ymin, ymax, perdy, onlyplus, factor=1))
            values = [0 if v1*v2==0 else v1/v2 for v1,v2 in zip(values1.T[1],values0.T[1])]
            ax.hist(values1.T[0], weights=values, bins=xEdges, histtype='step', color=col, ls=ls)
            ax.plot([-1,-1], [0,0], label=label, color=col, ls=ls)
        
        # finish plot
        ax.set_xlim(xEdges[0], xEdges[-1])
#        ax.set_ylim(0, 2)
        self. add_plotkey(hist, ax)
        ax.legend(frameon=False,labelspacing=0)
            
    def plot_histos_exp_pt(self, hist, models, ax):
        
        #check if LHCb analysis:
        pids_lhcb_13 = {1:"421", 2: "411", 3: "431"}
        histograms_lhcb_13 = ["LHCB_2015_I1396331/d0"+str(i)+"-x01-y0"+str(j) for i in [1,2,3] for j in range(1,6)]
        pids_lhcb_7 = {2:"421", 3: "411", 5: "431"}
        histograms_lhcb_7 = ["LHCB_2013_I1218996/d0"+str(i)+"-x01-y0"+str(j) for i in [2,3,5] for j in range(1,6)]
        pids_lhcb_5 = {1:"421", 2: "411", 3: "431"}
        histograms_lhcb_5 = ["LHCB_2016_I1490663/d0"+str(i)+"-x01-y0"+str(j) for i in [1,2,3] for j in range(1,6)]
        pids_alice_7 = {1:"421", 2: "411", 4: "431"}
        histograms_alice_7 = ["ALICE_2017_I1511870/d0"+str(i)+"-x01-y0"+str(j) for i in [1,2,4] for j in [1]]
        pids_alice_5 = {1:"421", 2: "411", 4: "431"}
        histograms_alice_5 = ["ALICE_2019_I1716440/d0"+str(i)+"-x01-y0"+str(j) for i in [1,2,4] for j in [1]]
        pids_atlas_7 = {2: "411"}
        histograms_atlas_7 = ["ATLAS_2015_I1408878/d0"+str(i)+"-x01-y0"+str(j) for i in [2] for j in [2]]
        
        id_particle, id_rapidity = int(hist.split("/")[1][2]), int(hist.split("/")[1][10])
        if   hist in histograms_lhcb_13:
            pid = pids_lhcb_13[id_particle]
            perdy, onlyplus, factor = True,  False, 1.
        elif hist in histograms_lhcb_7 :
            pid = pids_lhcb_7[id_particle]
            perdy, onlyplus, factor = False, False, 1.
        elif hist in histograms_lhcb_5 :
            pid = pids_lhcb_5[id_particle]
            perdy, onlyplus, factor = True , False, 1.
        elif hist in histograms_alice_7:
            pid = pids_alice_7[id_particle]
            perdy, onlyplus, factor = True , True , 1.
        elif hist in histograms_alice_5:
            pid = pids_alice_5[id_particle]
            perdy, onlyplus, factor = True , True , 1.
        elif hist in histograms_atlas_7:
            pid = pids_atlas_7[id_particle]
            perdy, onlyplus, factor = False,  False, 2.
        else: return

        if   hist in histograms_lhcb_13: ymin, ymax = 1.5+id_rapidity*0.5, 2.0+id_rapidity*0.5
        elif hist in histograms_lhcb_7 : ymin, ymax = 1.5+id_rapidity*0.5, 2.0+id_rapidity*0.5
        elif hist in histograms_lhcb_5 : ymin, ymax = 1.5+id_rapidity*0.5, 2.0+id_rapidity*0.5
        elif hist in histograms_alice_7: ymin, ymax = 0, 0.5
        elif hist in histograms_alice_5: ymin, ymax = 0, 0.5
        elif hist in histograms_atlas_7: ymin, ymax = 0, 2.1
        else: return
        
        # add data
        analysis = hist[:-12]
        histogram = hist[-11:]
        xVals, yVals, xErrs, yErrs, xEdges = self.add_data(ax, analysis=analysis,histogram=histogram)
        
        # add simulation
        for sample, label, col, ls, lw in models:
            values = np.array(self.get_ptbins_from_simuation(sample, pid, xVals, xErrs, ymin, ymax, perdy, onlyplus, factor))
            ax.hist(values.T[0], weights=values.T[1]*1e-6, bins=xEdges, histtype='step', color=col, ls=ls)
            ax.plot([-1,-1], [0,0], label=label, color=col, ls=ls)
        
        # finish plot
        ax.set_xlim(xEdges[0], xEdges[-1])
        ax.set_ylim(2e-1, 5e2)
        self. add_plotkey(hist, ax)
        if len(models)>10: ax.legend(frameon=False,labelspacing=0, loc="upper left", bbox_to_anchor=(1.1, 1))
        else: ax.legend(frameon=False,labelspacing=0)

    def plot_histos_pt(self, hist, models, ax):
    
        #extract ymin, ymax and fragmentation fraction
        pid, ymin, ymax  = hist
        if   pid == "411": pidstr = "$D^+$+c.c."
        elif pid == "421": pidstr = "$D^0$+c.c."
        elif pid == "431": pidstr = "$D_s$+c.c."
        ptmin, ptmax, npt,  = 0, 15, 15
        dpt = (ptmax-ptmin)/float(npt)
        xVals = np.linspace(ptmin+dpt/2., ptmax-dpt/2., npt)
        xErrs = [[dpt/2.,dpt/2.] for _ in xVals]
        xEdges = np.linspace(ptmin, ptmax, npt+1)
            
        # add simulation
        for sample, label, col, ls, lw in models:
            values = np.array(self.get_ptbins_from_simuation(sample, pid, xVals, xErrs, ymin, ymax))
            ax.hist(values.T[0], weights=values.T[1]*1e-6, bins=xEdges, histtype='step', color=col, ls=ls)
            ax.plot([-1,-1], [0,0], label=label, color=col, ls=ls)

        # finish plot
        ax.set_xlim(xEdges[0], xEdges[-1])
        ax.set_yscale("log")
        ax.set_xlabel(r"$p_T$ [GeV]")
        ax.set_ylabel(r"$d\sigma/dp_Tdy$ [$\mu$b/GeV]")
        ax.set_title(r"Prompt "+pidstr+" for rapidity range "+str(ymin)+"$<y<$"+str(ymax))
        ax.legend(frameon=False,labelspacing=0)

    #***************************************
    # Get eta Histograms
    #***************************************
    
    def plot_histos_y(self, hist, models, ax):

        #extract ymin, ymax and fragmentation fraction
        pid, ptmin, ptmax  = hist
        if   pid == "411": pidstr = "$D^+$+c.c."
        elif pid == "421": pidstr = "$D^0$+c.c."
        elif pid == "431": pidstr = "$D_s$+c.c."
        ymin, ymax, ny,  = 2, 9, 14
        dy = (ymax-ymin)/float(ny)
        xVals = np.linspace(ymin+dy/2., ymax-dy/2., ny)
        xErrs = [[dy/2.,dy/2.] for _ in xVals]
        xEdges = np.linspace(ymin, ymax, ny+1)
        
        # add simulation
        for sample, label, col, ls, lw in models:
            values = np.array(self.get_ybins_from_simuation(sample, pid, xVals, xErrs, ptmin, ptmax))
            ax.hist(values.T[0], weights=values.T[1]*1e-6, bins=xEdges, histtype='step', color=col, ls=ls)
            ax.plot([-1,-1], [0,0], label=label, color=col, ls=ls)

        # finish plot
        ax.set_xlim(xEdges[0], xEdges[-1])
        ax.set_ylim(5e-2, 5e2)
        ax.set_yscale("log")
        ax.set_xlabel(r"Rapidity $y$")
        ax.set_ylabel(r"$d\sigma/dp_Tdy$ [$\mu$b/GeV]")
        ax.set_title(r"Prompt "+pidstr+" for pt range "+str(ptmin)+"$<pT/$GeV$<$"+str(ptmax))
        ax.legend(frameon=False,labelspacing=0, loc="lower left")

    #***************************************
    # Get Neutrino Flux Histograms
    #***************************************
    
    def prob_int(self, energy, experiment, pid):
    
        # define geometry
        if experiment=="FASERv":
            length, rho, mproton = 100., 19.3  , 1.6605*10.**(-24) # [cm] [g/cm3] [g]
        if experiment=="FLARE":
            length, rho, mproton = 700., 1.3954, 1.6605*10.**(-24) # [cm] [g/cm3] [g]

        # define neutrino
        if   pid in [ "12", "14"]: pidid=1
        elif pid in ["-12","-14"]: pidid=2
        elif pid in [ "16"      ]: pidid=3
        elif pid in ["-16"      ]: pidid=4
    
        # get xs and interaction probability
        sigma = np.interp(energy, self.nu_xsecs[0], self.nu_xsecs[pidid])
        prob  = sigma * rho * length / mproton
        
        return prob
    
            
    def plot_histos_faser(self, hist, models, experiment, ax, interact=False):
    
        #colors
        col_lgt="black" # "dimgray"
        col_hvy="gray" #"darkgoldenrod"
        
        #extract boundaries
        pid, nsample = hist
        if   experiment=="FASERv" and pid == "12": pids, ylims, ylimsint, pidstr = [12,-12], [3e2,3e6], [1e+0,3e3], r"$\nu_e + \bar\nu_e$"
        elif experiment=="FASERv" and pid == "14": pids, ylims, ylimsint, pidstr = [14,-14], [3e2,3e6], [1e+0,3e3], r"$\nu_\mu + \bar\nu_\mu$"
        elif experiment=="FASERv" and pid == "16": pids, ylims, ylimsint, pidstr = [16,-16], [3e1,3e5], [1e-1,1e2], r"$\nu_\tau + \bar\nu_\tau$"
        elif experiment=="eta85"  and pid == "12": pids, ylims, ylimsint, pidstr = [12,-12], [3e2,3e6], [1e+0,3e3], r"$\nu_e + \bar\nu_e$"
        elif experiment=="eta85"  and pid == "14": pids, ylims, ylimsint, pidstr = [14,-14], [3e2,3e6], [1e+0,3e3], r"$\nu_\mu + \bar\nu_\mu$"
        elif experiment=="eta85"  and pid == "16": pids, ylims, ylimsint, pidstr = [16,-16], [3e1,3e5], [1e-1,1e2], r"$\nu_\tau + \bar\nu_\tau$"
        elif experiment=="FLARE"  and pid == "12": pids, ylims, ylimsint, pidstr = [12,-12], [2e3,2e7], [3e+1,1e5], r"$\nu_e + \bar\nu_e$"
        elif experiment=="FLARE"  and pid == "14": pids, ylims, ylimsint, pidstr = [14,-14], [2e3,2e7], [1e+2,3e5], r"$\nu_\mu + \bar\nu_\mu$"
        elif experiment=="FLARE"  and pid == "16": pids, ylims, ylimsint, pidstr = [16,-16], [2e2,2e6], [1e+0,1e4], r"$\nu_\tau + \bar\nu_\tau$"
        else: print ("Input wrong:", pid)
        if experiment=="eta85" : experimentL, zloc, lumi = "FASERv", 480., 150*1000.
        if experiment=="FASERv": experimentL, zloc, lumi = "FASERv", 480., 150*1000.
        if experiment=="FLARE" : experimentL, zloc, lumi = "FLARE" , 620., 3000*1000.
        emin, emax, ne,  = 1, 4, 30
        xEdges = np.logspace(emin, emax, ne+1)
        
        #add neutrinos from charm mesons
        #for gen, ls in zip(["S","P","D"],["solid","dotted","dashed"]):
        #    data = self.nucharm[experiment+"_"+pid+"_"+gen]
        #    ax.hist(data[0], weights=data[1+interact], bins=xEdges, histtype='step', color=col_hvy, ls=ls)
        
        #add neutrinos from light mesons
        alllight=True
        if pid!="16" and alllight==False:
            for gen in ["E"]:
                data = self.nulight[experimentL+"_"+pid+"_"+gen]
                ax.hist(data[0], weights=data[1+interact], bins=xEdges, histtype='step', color=col_lgt, lw=2, ls="solid")
                
        if pid!="16" and alllight==True:
            datas = []
            for gen in ["S","D","Q","E"]:
                data = self.nulight[experimentL+"_"+pid+"_"+gen]
                energies,entries = data[0], data[1+interact]
                datas.append(entries)
            datas = np.array(datas)
            data = np.array([[np.mean(xxx), min(xxx), max(xxx)] for xxx in datas.T])
            ax.hist(energies, weights=data.T[2], bins=xEdges, histtype='bar', color='gainsboro', lw=1)
            ax.hist(energies, weights=data.T[1], bins=xEdges, histtype='bar', color='white', lw=1)
            ax.hist(energies, weights=data.T[0], bins=xEdges, histtype='step', color=col_lgt, lw=2)
            
        if False:
            for gen in ["S"]:
                data = self.nulight[experimentL+"_"+pid+"_"+gen]
                ax.hist(data[0], weights=data[1+interact], bins=xEdges, histtype='step', color='red', lw=2, ls="solid")
                print(experimentL+"_"+pid+"_"+gen, data[1+interact])
                
                
        if pid=="12" and experiment=="FASERv" and interact==False: ax.text(60, 1e5, "$\pi K \Lambda$", color=col_lgt, ha="left")
        if pid=="12" and experiment=="FASERv" and interact==True: ax.text(60, 1e1, "$\pi K \Lambda$", color=col_lgt, ha="left")
        if pid=="12" and experiment=="FLARE" and interact==False: ax.text(60, 1e6, "$\pi K \Lambda$", color=col_lgt, ha="left")
        if pid=="12" and experiment=="FLARE" and interact==True: ax.text(60, 1e3, "$\pi K \Lambda$", color=col_lgt, ha="left")
        
        # add simulation
        for sample, label, col, ls, lw in models:
            energies, entriesP = readfile("files/"+sample+"/"+sample+"_"+experiment+"_" +str(pid)+".txt").T
            energies, entriesM = readfile("files/"+sample+"/"+sample+"_"+experiment+"_-"+str(pid)+".txt").T
            if interact: entriesP = [w*self.prob_int(en,experiment,     pid) for en,w in zip(energies,entriesP)]
            if interact: entriesM = [w*self.prob_int(en,experiment, "-"+pid) for en,w in zip(energies,entriesM)]
            weights = np.array([w1+w2 for w1,w2 in zip(entriesP, entriesM)])
            if interact: weights *= lumi
            ax.hist(energies, weights=weights, bins=xEdges, histtype='step', color=col, ls=ls)
            ax.plot([-1,-1], [0,0], label=label, color=col, ls=ls)
        
        # finish plot
        xlims = [50.7859, 6393.5]
        ax.set_xlim(xlims[0],xlims[1])
        if interact: ax.set_ylim(ylimsint[0],ylimsint[1])
        else: ax.set_ylim(ylims[0],ylims[1])
        ax.set_xscale("log")
        ax.set_yscale("log")
        ax.set_xlabel(r"Neutrino Energy [GeV]")
        if interact: ax.set_ylabel(r"Interacting Neutrinos [1/bin]")
        else: ax.set_ylabel(r"Neutrinos [pb/bin]")
        ax.set_title(experiment+" 13 TeV: " +pidstr)
        if interact: ax.legend(frameon=False,labelspacing=0, loc="upper left")
        elif len(models)>10: ax.legend(frameon=False,labelspacing=0, loc="upper left", bbox_to_anchor=(1.1, 1))
        else: ax.legend(frameon=False,labelspacing=0, loc="lower left")
   
